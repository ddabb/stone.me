<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>他山之石</title>
  
  <subtitle>专注于分享的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.60points.com/"/>
  <updated>2018-12-23T15:25:09.891Z</updated>
  <id>https://www.60points.com/</id>
  
  <author>
    <name>stone liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018年总结</title>
    <link href="https://www.60points.com/2018%E5%B9%B4%E6%80%BB%E7%BB%93/"/>
    <id>https://www.60points.com/2018年总结/</id>
    <published>2018-12-23T11:40:29.000Z</published>
    <updated>2018-12-23T15:25:09.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>是时候写2018年的年终总结了。</p><h1 id="新"><a href="#新" class="headerlink" title="新"></a>新</h1><p>前不久，在脉脉上有个话题就是用一个字来总结自己的2018年。我思来想去用了一个<strong>新</strong>字。<br>这个<strong>新</strong>字体现在了很多方面，新的工作，新的租房，新的博客。  </p><h2 id="新的工作"><a href="#新的工作" class="headerlink" title="新的工作"></a>新的工作</h2><p><strong>新技术</strong> 新的工作是于4月份开始的，之前我只接触过Sql Server一种数据库，今年业内或者业余有接触了Sqlite、Mysql、Pgsql,Redis等数据库。其中Mysql 5.6,5.7,5.8的社区版都浅尝辄止地了解了一番,也算得上有半年的mysql使用经验了。<br><strong>新职责</strong> 之前的工作涉及到需求设计、概要设计、项目管理、功能开发、维护等各方面;在新工作环境下，这一切变得不复存在，目前我的主要职责是负责修复bug,产品部署上线即可。会议少了很多，总结也少了很多。<br><strong>新实践</strong> 理念还是我原来奉行的拒绝重复的理念，这次是真正意义地落到了实处。工作内容就是完善一个避免重复工作的系统，在每次实际部署的过程中耗费的时间较长，所以我自行写了一个软件免去了部署过程中的很多的重复低效的步骤。<br><strong>新脾气</strong> 个人一直有个坏毛病，抗干扰的能力太差。自己好不容易整理好的思路网被莫名其妙地打乱难免心情不爽，但是有时候生活就是这样，你不能让所以事情都按照自己的意愿来发展，若声音太噪杂，自己带耳机听歌解决。  </p><h2 id="新的认知"><a href="#新的认知" class="headerlink" title="新的认知"></a>新的认知</h2><p>今年以来，个人认知上面发生了一些改变。<br><strong>新博客</strong> 是在7月28号开始动了整理资料的念头,到如今也有了30余篇文章。这个网站的搭建算是今年的比较满意的成就之一。虽然有时候也会有点质疑同事们整理的资料那么多，是否随着时间的消逝就从来再没有翻阅过。但是自己也深知整理资料的过程就是形成自己的知识体系的过程，好记性不如烂笔头，这部分是必不可少的。<br><strong>新室友</strong> 今年想着改变下自己的生活圈子，选择了自如的合租房。过来合租的小女生基本上都是23~24岁左右的小女生。合租房就是这样，遇到性格相仿的人哪样都好，遇到性格不好的人就哪样都恶，好能好到忙完手头上的事情凌晨三点一起出去吃夜宵，没合租了还得嘲讽我还是单身的事情。总的来说，这些小女生还没毕业就各种找工作，找实习的确是当年的我不能比。认识她们也算是生活中的小庆幸了。<br><strong>新朋友</strong> 今年新认识的朋友要比去年多一些，有些是因为工作上的话题，有些是因为个人兴趣爱好，甚至有的还是极力宣传个人开源软件的大佬。交流得多了就会有种感觉，这个人的文章我拜读过，这个大佬的博客的资料对我有用，就会有种这个圈子就这么大的感觉。这样多交流，自然就共同进步了。<br><strong>新相亲</strong> 这个<strong>新</strong>我多讲几句，自从分手以后表示并不抗拒相亲这件事情，我甚至跑到<strong>我主良缘</strong>作了一个个人性格测评，我表示对老师的专业非常认可，但是我还是没有继续在该平台找对象，并不是不信任其专业。只是一些个人私人原因,没有继续罢了。各种要给我介绍对象的人很多，其余基本上都是在网上聊了几句就没有下文。也就只有一个相亲对象，我屁颠屁颠地跑到她工作岗位上去见了她，漂亮是真漂亮，但是尬聊是有点真尬聊。行此文之际正值某某多年的离婚谣言被坐实，其实自己的相亲心态一直都没有放端正，就是比较希望在同一个城市生活，然后会觉得自己没有强大到让一个女孩子背井离乡到他乡生活。只能希冀自己能够早点强大起来一点吧。  </p><h2 id="新的挑战"><a href="#新的挑战" class="headerlink" title="新的挑战"></a>新的挑战</h2><p><strong>新压力</strong>  如果非得跟运势扯上关系，今年的运势的确不是特别好，但是否极泰来，杀不死我的都会使我更加强大吧。只要不是真正意义地被杀死就还有东山再起的时候。  </p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>其实,今年也有不少<strong>旧</strong>，偶遇十年没见的高中隔壁班的女同学,还有初中隔壁班的女同学被作为相亲对象,还有联系了五年没联系的大学同学，生活的圈子就是这样，可以很大，也可以很小。看自己是否愿意改变罢了。<br>总的来说,今年我的职场发展，人际关系，居住环境等都发生了很大的变化。有赞赏，有批评。有希冀，有失落。个人总结下来，这一年还是收获了不少新知，算是一大突破吧。愿与看到此处的朋友共勉。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h1&gt;&lt;p&gt;是时候写2018年的年终总结了。&lt;/p&gt;
&lt;h1 id=&quot;新&quot;&gt;&lt;a href=&quot;#新&quot; class=&quot;headerlink&quot; title=&quot;新&quot;&gt;
      
    
    </summary>
    
      <category term="生活感悟" scheme="https://www.60points.com/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="总结" scheme="https://www.60points.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>构造20个提示数的标准数独</title>
    <link href="https://www.60points.com/make_an_twenty_clues_soduku/"/>
    <id>https://www.60points.com/make_an_twenty_clues_soduku/</id>
    <published>2018-12-21T13:19:16.000Z</published>
    <updated>2018-12-24T15:17:08.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>最近在业余时间试图制作一个数独相关的小软件,包含生成标准数独的功能,但是在构造20个提示数的初盘的时候遇到了一些问题，故写下此文记录采取的一些方案。</p><h1 id="构造数独"><a href="#构造数独" class="headerlink" title="构造数独"></a>构造数独</h1><p>先参照<a href="https://www.60points.com/handwrite-soduku/">手写数独教程</a>生成一个数独;<br>再采取行替换,列替换的方式增加生成数独的随机性<br><strong>我采取的是MathNet.Numerics中DenseMatrix的PermuteColumns和PermuteRows方法</strong>，该处不做深入描述。</p><h1 id="出题方案"><a href="#出题方案" class="headerlink" title="出题方案"></a>出题方案</h1><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>采取“挖空法”的方式, 随机清除掉完整数独中的(81-20)个数字,看是否能够生成唯一解。不行则重复该过程。<br><strong>结论：该方案运气不好的情况下一个小时都没有办法甚至一整天都没法一个符合条件的20个提示数的标准数独</strong></p><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p>在进行方案一进行实验的时候,我发现若随机生成30个提示数，则很容易构成唯一解。<br>若将具有30个提示数的数独记作初盘<strong>A</strong>。<br>则其可能有效分解为具有29个提示数的初盘<strong>A1</strong>,<strong>A2</strong>。<br><strong>A1</strong>可能有效分解成具有28个提示数的出牌 <strong>B1</strong>,<strong>B2</strong>。<br>假设初盘<strong>A</strong>删除某个位置<strong>L</strong>使<strong>A</strong>分解出来的29个提示数的初盘不具备唯一解。<br>则多次分解之后的<strong>K1</strong>必须包含位置<strong>L</strong>。<br>该过程可以采取<strong>深度优先算法</strong>实现。<br><strong>结论：该方案可以很好的生成提示数个数为23,24的标准数独,但是基本上很难获取到提示数个数为22以下的标准数独。</strong></p><h2 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h2><p>具有30个提示数的数独记作初盘<strong>A</strong>，<br>对初盘<strong>A</strong>的元素进行依次清空动作,生成30个具有29个提示数的初盘<strong>B1~B29</strong>。<br>若清除<strong>L1</strong>或者<strong>L2</strong>或者<strong>L3</strong>等不能构成标准数独。<br>则最终的20个提示数的初盘必定包含位置<strong>L1和L2和L3</strong>。<br>再结合方案二的深度优先算法进行运算  。<br><strong>结论：该方案即先做一遍广度优先搜索，再做多次深度优先搜索,因为优化了深度优先搜索的判定条件</strong><br><strong>故找到22个提示数的标准数独的速度较方案二有较大提升</strong><br><strong>但是生成20个提示数的数独的速度依然很慢。</strong>  </p><h2 id="方案四"><a href="#方案四" class="headerlink" title="方案四"></a>方案四</h2><p>具有30个提示数的数独记作初盘<strong>A</strong><br>对初盘<strong>A</strong>的元素进行依次清空动作,生成30个具有29个提示数的初盘<strong>B1~B29</strong>。<br>若初盘有任意19个数字不能删除，且任意删除其中一个之后的29个提示数的初盘必定多解,<br>则最终20个提示数的初盘中一定包含这19个位置的数字。<br>只需要从剩余(30-19)=11个位置中任选(20-19)=1个数字，构成11个20个数字的数独初盘,看是否存在标准数独。<br><strong>结论：是唯一一个生成了20个提示数的标准数独的一种方案</strong><br><strong>能否找到一个20个提示数的标准数独题还得看最初的30个提示数是否能降解成20个提示数的标准数独题</strong><br><strong><font color="#FF0000">该方案在试图找到23或者24个提示数的标准数独中性能最佳的。</font></strong>  </p><h2 id="方案五"><a href="#方案五" class="headerlink" title="方案五"></a>方案五</h2><p>先固定要保留的位置，然后每次都重置完整的数独，直到数独初盘构成唯一解时，则停止。这样也有利于产生一些漂亮的图案。<br>如下图所示<br><img src="/make_an_twenty_clues_soduku/固定形状.png" alt="确认位置生成的数独"></p><h1 id="数独示例"><a href="#数独示例" class="headerlink" title="数独示例"></a>数独示例</h1><p>以下是通过该工具生成的具有22个提示数的难度为7.2的数独<br><img src="/make_an_twenty_clues_soduku/难度7.2.png" alt="数独示例"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong><font color="#FF0000">数学基础永远都是高质量软件产品的前提条件。</font></strong></p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p>@鹿暖，@楠竹 两个数学系的大学生协助复习数学上的知识。<br><strong>QQ群全民数独007(106893459)</strong>对我相关数独技巧问题的大力支持！</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>[C#实现排列、组合] (<a href="https://www.cnblogs.com/zhao-yi/p/8533035.html">https://www.cnblogs.com/zhao-yi/p/8533035.html</a>)</li><li><a href="https://numerics.mathdotnet.com/">MathNet.Numerics 数学计算类</a></li><li><a href="https://github.com/ddabb/soduku">C#源码</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h1&gt;&lt;p&gt;最近在业余时间试图制作一个数独相关的小软件,包含生成标准数独的功能,但是在构造20个提示数的初盘的时候遇到了一些问题，故写下此文记录采取的一些方案。
      
    
    </summary>
    
      <category term="逻辑思维" scheme="https://www.60points.com/categories/%E9%80%BB%E8%BE%91%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="数独" scheme="https://www.60points.com/tags/%E6%95%B0%E7%8B%AC/"/>
    
  </entry>
  
  <entry>
    <title>斗地主所有牌型组合个数统计</title>
    <link href="https://www.60points.com/138712181744994/"/>
    <id>https://www.60points.com/138712181744994/</id>
    <published>2018-12-03T13:48:23.000Z</published>
    <updated>2018-12-06T16:10:24.562Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>最近业余时间在研究排列组合的相关问题,话题涉及到了<strong>在不考虑花色的情况下？54张牌按照斗地主的方式以20，17，17的方式分给3个人有多少中可能解决方案？</strong><br>我觉得这个问题有点意思，并以sql脚本的形式实现了问题的求解过程，希望大家能从这篇文章中所有收获。</p><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>以4个3为例，分给地主1，农民2，农民3的所有组合情况如下：<br><img src="/138712181744994/4个3.png" alt="4个3的组合情况"><br>既4个3在3个玩家中的可能情况有15种。在不考虑斗地主手牌数限制的情况下,因A到K有13张牌，则A到K的所有位置的组合数有$15^{13}$种可能性。<br>以大王为例,分给地主1，农民2，农民3的所有组合情况如下：<br><img src="/138712181744994/大王.png" alt="大王的组合情况"><br>在不考虑斗地主手牌数限制的情况下,大王和小王在三家的可能性有3*3=9种可能性。<br>所以牌型组合的理论上限是$9*15^{13}$。接近于$1.75*10^{16}$。  </p><p><img src="/138712181744994/组合.png" alt="组合情况的一种"><br>根据<a href="https://baike.baidu.com/item/计数原理/4032370">计数原理</a>,结合上图可知：<br>如果3~7在玩家1，2，3的手牌张数分别是20，0，0的可行方法是1种。<br>如果8~Q在玩家1，2，3的手牌张数分别是0，17，3的可行方法是35种。<br>如果K到大王在玩家1，2，3的手牌张数分别是0，0，14的可行方法是1种。<br>所以三个步骤组合起来的总可行方法是$1*35*1=35$种方法。</p><p>具体细节参考<a href="https://github.com/ddabb/138712181744994/blob/master/product.sql">Sql server版斗地主牌型组合统计的代码</a>,最终的出来的结果是<strong>138712181744994</strong>,即$1.3871*10^{14}$。即在不区分花色的情况下，斗地主所有的牌型组合数。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>记录斗地主的所有牌型这种方式来做AI是不切实际的，毕竟普通PC机是没有办法存储$1.3871*10^{14}$条数据的。</p><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://baike.baidu.com/item/计数原理/4032370">计数原理</a></li><li><a href="https://www.60points.com/combination/">m个球放到n个箱子中几种解法</a></li><li><a href="https://www.60points.com/Fight-the-Landlord-Card-Type-Aanalysis/">欢乐斗地主出牌方式统计</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h1&gt;&lt;p&gt;最近业余时间在研究排列组合的相关问题,话题涉及到了&lt;strong&gt;在不考虑花色的情况下？54张牌按照斗地主的方式以20，17，17的方式分给3个人有
      
    
    </summary>
    
      <category term="逻辑思维" scheme="https://www.60points.com/categories/%E9%80%BB%E8%BE%91%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="欢乐斗地主" scheme="https://www.60points.com/tags/%E6%AC%A2%E4%B9%90%E6%96%97%E5%9C%B0%E4%B8%BB/"/>
    
      <category term="排列组合" scheme="https://www.60points.com/tags/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/"/>
    
      <category term="138712181744994" scheme="https://www.60points.com/tags/138712181744994/"/>
    
  </entry>
  
  <entry>
    <title>m个球放到n个箱子中几种解法</title>
    <link href="https://www.60points.com/combination/"/>
    <id>https://www.60points.com/combination/</id>
    <published>2018-11-29T14:23:23.000Z</published>
    <updated>2018-11-30T00:22:57.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>该文的诞生源于一个问题:<strong>斗地主有多少种牌型组合?</strong><br>众所周知,斗地主共54张牌分别给三个人20,17,17张牌，因为方块3和梅花3在斗地主中无区别，转化一下问题就是13种不同的颜色（不包括黑白）的球各4个,黑球，白球各1个,放到容积分别为20,17,17的三个箱子中有多少种方法？<br>第一想法是想到采取排列组合的方式去解，但是多久没有做排列组合的习题，我发现<strong>3红3黄3蓝1黑1白共11个球放到容积为5,3,3的三个箱子中,不考虑顺序总共有多少种方法？</strong>这个问题我都计算困难,该文简单讲一下该问题的两种解法。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="方案1：全排列"><a href="#方案1：全排列" class="headerlink" title="方案1：全排列"></a>方案1：全排列</h2><h3 id="方案1-1-考虑黑白球"><a href="#方案1-1-考虑黑白球" class="headerlink" title="方案1.1 考虑黑白球"></a>方案1.1 考虑黑白球</h3><p>假设11个球的颜色全不相同,则所有排列顺序是1~11的全排列是<strong>11!=39916800</strong>。<br>再假设1,4,7为红球,2,5,8为黄球,3,6,9为蓝球，10为黑球,11为白球。  </p><p><font color="#FF0000">也可以1,2,3为红球,4,5,6为黄球,7,8,9为蓝球，10为白球,11为黑球。给球编号是为了计算全排列方便。</font><br>以全排列元素中的一个<strong>链表X</strong>(全排列的取值之一) <strong>{9,8,3,5,6,4,11,7,1,2,10}</strong>为例,<br>可以分成 <strong>{9,8,3,5,6}</strong>和 <strong>{4,11,7}</strong>和 <strong>{1,2,10}</strong>三组。<br>将每组数据中≤9的对3取余,结果变成了A:<strong>{0,2,0,2,0}</strong>和B:<strong>{1,1,11}</strong>和C:<strong>{1,2,10}</strong>三组数据。<br>∵ 在箱子中 <strong>{4,11,7}</strong>和 <strong>{4,7,11}</strong>是等价的。<br>∴ A、B、C三组都需要排序，排序后为{0,0,0,2,2}，{1,1,11},{1,2,10}<br>∴<strong>{9,8,3,5,6,4,11,7,1,2,10}</strong> 表示A箱子有3个蓝球，2个黄球；B箱子有2个红球,1个白球；C箱子有1个红球,1个黄球,1个黑球。<br>∴链表X的表达式是0,0,0,2,2,1,1,11,1,2,10<br>∴将39916800链表的表达式去重就可以算出序中提到的问题的解为355个。  </p><h3 id="方案1-2-先不考虑黑白球"><a href="#方案1-2-先不考虑黑白球" class="headerlink" title="方案1.2 先不考虑黑白球"></a>方案1.2 先不考虑黑白球</h3><p>∵黑球的可能位置只有3种,白球的可能位置也只有3种。<br>即黑白球都在A箱,都在B箱,都在C箱,分别在AC箱,分别在BC箱，分别在AB箱。<br>所有组合情况如下<br><img src="/combination/nine.png" alt="黑白球位置组合"><br>这样就只需要计算9的全排列<strong>9!=362880</strong>次数据。<br>计算方式如方案1.1,再次不再赘述。<br>结果依旧为355。<br>具体计算代码请参考<a href="https://github.com/ddabb/permutations/blob/master/Program.cs">方案一代码</a></p><h2 id="方案2：笛卡尔积"><a href="#方案2：笛卡尔积" class="headerlink" title="方案2：笛卡尔积"></a>方案2：笛卡尔积</h2><p>在不考虑各箱子容积的前提下；<br>每个球都有3个箱子可以选择，则11个球的位置有<strong>3的11次方=177147</strong>中可能性。<br>若箱子A,B,C编号为{1,2,3}。大小分别为{5,3,3}。<br>则第一个球和第二球的箱子可能组合是{1,2,3}和{1,2,3}的笛卡尔积  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;   &#123;1,1&#125;,&#123;1,2&#125;,&#123;1,3&#125;,   &#123;2,1&#125;,&#123;2,2&#125;,&#123;2,3&#125;,   &#123;3,1&#125;,&#123;3,2&#125;,&#123;3,3&#125;  &#125;</span><br></pre></td></tr></table></figure><p>将每个球所有的可能性做笛卡尔积之后，会得到一个177147个<strong>元素个数为11的链表L</strong>的集合S。<br>若链表L中有5个元素1，有3个元素2，有3个元素3。则链表L符合球进入箱子的逻辑。否则不符合球进入箱子的逻辑。<br>假若链表L为{1,2,3,2,3,2,1,1,1,1,3}且11个球的顺序为<strong>红,红,红,黄,黄,黄,蓝,蓝,蓝,黑,白</strong><br>则箱子内的颜色情况如下:<br>A箱：红蓝蓝蓝黑<br>B箱：红黄蓝<br>C箱：红黄白<br>所以链表L的表示式为 A-红蓝蓝蓝黑 B-红黄蓝 C-红黄白<br>将所有符合进箱逻辑的链表的表达式算出来去重,算出来<strong>结果依旧为355。</strong><br>具体计算代码请参考<a href="https://github.com/ddabb/combination">方案二代码</a>  </p><blockquote><p><strong><font color="#FF0000">注意：相同颜色的球的顺序应该连在一起，否则箱子内的球需要再做一次排序去重。</font></strong>  </p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>该文是对排列组合知识的一个补充。如果有更好的解决m个不同颜色的球放到n个箱子中的更好的解法，欢迎留言或者直接联系我。<br>如果能有算出斗地主有多少种牌型组合的方法，则更希望能联系我。<br>方案2在箱子不够多,球不够多的情况下,的确是不错的一个计算方案。</p><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.cnblogs.com/localhost2016/p/8668355.html">C# 用Linq的方式实现组合和笛卡尔积（支持泛型T）</a></li><li><a href="https://blog.csdn.net/MaybeHelios/article/details/759315">终于有个高效率的排列组合算法</a></li><li><a href="https://www.60points.com/Fight-the-Landlord-Card-Type-Aanalysis/">欢乐斗地主出牌方式统计</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h1&gt;&lt;p&gt;该文的诞生源于一个问题:&lt;strong&gt;斗地主有多少种牌型组合?&lt;/strong&gt;&lt;br&gt;众所周知,斗地主共54张牌分别给三个人20,17,17张牌
      
    
    </summary>
    
      <category term="逻辑思维" scheme="https://www.60points.com/categories/%E9%80%BB%E8%BE%91%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="排列组合" scheme="https://www.60points.com/tags/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/"/>
    
      <category term="不同颜色" scheme="https://www.60points.com/tags/%E4%B8%8D%E5%90%8C%E9%A2%9C%E8%89%B2/"/>
    
  </entry>
  
  <entry>
    <title>python画爱心</title>
    <link href="https://www.60points.com/python-print-heart/"/>
    <id>https://www.60points.com/python-print-heart/</id>
    <published>2018-11-26T12:57:46.000Z</published>
    <updated>2018-11-26T13:43:42.180Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>该文算是python版的”Hello world”初探，故作相关的记录。<br>环境准备:Visual Studio 2017,python</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="爱心一"><a href="#爱心一" class="headerlink" title="爱心一"></a>爱心一</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">x_coords = np.linspace(- 100, 100, 500)</span><br><span class="line">y_coords = np.linspace(- 100, 100, 500)</span><br><span class="line">points = []</span><br><span class="line"></span><br><span class="line">for y in y_coords:</span><br><span class="line"> for x in x_coords:</span><br><span class="line">    if((x* 0.03)** 2+(y* 0.03)** 2- 1)** 3-(x* 0.03)** 2*(y* 0.03)** 3&lt;= 0:</span><br><span class="line">       points.append(&#123; &quot;x&quot;: x, &quot;y&quot;: y&#125;)</span><br><span class="line"></span><br><span class="line">heart_x = list(map( lambda point: point[ &quot;x&quot;], points))</span><br><span class="line">heart_y = list(map( lambda point: point[ &quot;y&quot;], points))</span><br><span class="line"></span><br><span class="line">plt.scatter(heart_x, heart_y, s= 10, alpha= 0.5)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>效果如图<br><img src="/python-print-heart/heart1.png" alt="爱心1">  </p><h2 id="爱心二"><a href="#爱心二" class="headerlink" title="爱心二"></a>爱心二</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"> </span><br><span class="line">import turtle</span><br><span class="line">import time</span><br><span class="line"> </span><br><span class="line"># 画心形圆弧</span><br><span class="line">def hart_arc():</span><br><span class="line">    for i in range(200):</span><br><span class="line">        turtle.right(1)</span><br><span class="line">        turtle.forward(2)</span><br><span class="line"> </span><br><span class="line">def move_pen_position(x, y):</span><br><span class="line">    turtle.hideturtle()     # 隐藏画笔（先）</span><br><span class="line">    turtle.up()     # 提笔</span><br><span class="line">    turtle.goto(x, y)    # 移动画笔到指定起始坐标（窗口中心为0,0）</span><br><span class="line">    turtle.down()   # 下笔</span><br><span class="line">    turtle.showturtle()     # 显示画笔</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">#love = input(&quot;请输入表白话语，默认为‘I Love You’：&quot;)</span><br><span class="line">#signature = input(&quot;请签署你的大名，不填写默认不显示：&quot;)</span><br><span class="line"></span><br><span class="line">signature= &apos;&apos;</span><br><span class="line">love = &apos;I Love You&apos;</span><br><span class="line"></span><br><span class="line">if love == &apos;&apos;:</span><br><span class="line">    love = &apos;I Love You&apos;</span><br><span class="line"> </span><br><span class="line"># 初始化</span><br><span class="line">turtle.setup(width=800, height=500)     # 窗口（画布）大小</span><br><span class="line">turtle.color(&apos;red&apos;, &apos;pink&apos;)     # 画笔颜色</span><br><span class="line">turtle.pensize(3)       # 画笔粗细</span><br><span class="line">turtle.speed(1)     # 描绘速度</span><br><span class="line"># 初始化画笔起始坐标</span><br><span class="line">move_pen_position(x=0,y=-180)   # 移动画笔位置</span><br><span class="line">turtle.left(140)    # 向左旋转140度</span><br><span class="line"> </span><br><span class="line">turtle.begin_fill()     # 标记背景填充位置</span><br><span class="line"> </span><br><span class="line"># 画心形直线（ 左下方 ）</span><br><span class="line">turtle.forward(224)    # 向前移动画笔，长度为224</span><br><span class="line"># 画爱心圆弧</span><br><span class="line">hart_arc()      # 左侧圆弧</span><br><span class="line">turtle.left(120)    # 调整画笔角度</span><br><span class="line">hart_arc()      # 右侧圆弧</span><br><span class="line"># 画心形直线（ 右下方 ）</span><br><span class="line">turtle.forward(224)</span><br><span class="line"> </span><br><span class="line">turtle.end_fill()       # 标记背景填充结束位置</span><br><span class="line"> </span><br><span class="line"># 在心形中写上表白话语</span><br><span class="line">move_pen_position(0,0)      # 表白语位置</span><br><span class="line">turtle.hideturtle()     # 隐藏画笔</span><br><span class="line">turtle.color(&apos;#CD5C5C&apos;, &apos;pink&apos;)      # 字体颜色</span><br><span class="line"># font:设定字体、尺寸（电脑下存在的字体都可设置）  align:中心对齐</span><br><span class="line">turtle.write(love, font=(&apos;Arial&apos;, 30, &apos;bold&apos;), align=&quot;center&quot;)</span><br><span class="line"> </span><br><span class="line"># 签写署名</span><br><span class="line">if signature != &apos;&apos;:</span><br><span class="line">    turtle.color(&apos;red&apos;, &apos;pink&apos;)</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    move_pen_position(180, -180)</span><br><span class="line">    turtle.hideturtle()  # 隐藏画笔</span><br><span class="line">    turtle.write(signature, font=(&apos;Arial&apos;, 20), align=&quot;center&quot;)</span><br><span class="line"> </span><br><span class="line"># 点击窗口关闭程序</span><br><span class="line">window = turtle.Screen()</span><br><span class="line">window.exitonclick()</span><br></pre></td></tr></table></figure><p>效果如下图<br><img src="/python-print-heart/heart2.png" alt="爱心2">  </p><h2 id="爱心三"><a href="#爱心三" class="headerlink" title="爱心三"></a>爱心三</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from matplotlib.font_manager import FontProperties</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x=np.linspace(-2,2,200)</span><br><span class="line">y1 =np.sqrt(1-np.square(np.fabs(x)-1))</span><br><span class="line">y2 =np.arccos(1-np.fabs(x))-np.pi</span><br><span class="line"></span><br><span class="line">plt.plot(x,y1,&apos;r&apos;,x,y2,&apos;r&apos;)</span><br><span class="line">plt.axis([-2.5,2.5,-3.5,1.5])</span><br><span class="line"></span><br><span class="line">plt.title(&apos;hello world of python,copy from @andrew&apos;,fontsize=16)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>效果如下图<br><img src="/python-print-heart/heart3.png" alt="爱心3">  </p><h1 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h1><p><strong>在visual studio 2017中命令行执行 pip install numpy 无效</strong><br>在nuget程序包管理器控制台执行即可<br><strong>pip install pyinstaller之后生成的exe无法执行</strong><br>在我电脑上的路径是<strong>C:\Program Files (x86)\Microsoft Visual Studio\Shared\Python36_64\Scripts</strong>,<br>把run.py拷贝到该目录,执行<strong>pyinstaller -F -W p . run.py</strong>解决问题</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="/python-print-heart/hurt.png" alt="暴击"></p><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://cloud.tencent.com/developer/news/216095">520情人节，用python画个爱心送给你的那个她！</a></li><li><a href="https://www.taitaiblog.com/1314.html">七夕将至，教你用Python绘制爱心，优雅的表白520~</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h1&gt;&lt;p&gt;该文算是python版的”Hello world”初探，故作相关的记录。&lt;br&gt;环境准备:Visual Studio 2017,python&lt;/p&gt;
      
    
    </summary>
    
      <category term="python" scheme="https://www.60points.com/categories/python/"/>
    
    
      <category term="python" scheme="https://www.60points.com/tags/python/"/>
    
      <category term="画爱心" scheme="https://www.60points.com/tags/%E7%94%BB%E7%88%B1%E5%BF%83/"/>
    
      <category term="hello world" scheme="https://www.60points.com/tags/hello-world/"/>
    
  </entry>
  
  <entry>
    <title>手写数独教程</title>
    <link href="https://www.60points.com/handwrite-soduku/"/>
    <id>https://www.60points.com/handwrite-soduku/</id>
    <published>2018-11-25T03:14:42.000Z</published>
    <updated>2018-12-16T04:15:40.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>该文目的是简单记载3*3数独的手写过程,并熟悉一下mathjax工具的运用。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>该文的整个过程可以用手写实现，也可以用编程语言实现，该文不对怎么用编程语言实现做详细描述。仅阐述手写的详细过程:</p><h2 id="生成行"><a href="#生成行" class="headerlink" title="生成行"></a>生成行</h2><p>首先,我们可以手写一行包含1~9<strong>数据行A</strong>，不重复即可，顺序不重要,该文以1~9顺序排列做示例。<br>\begin{bmatrix}<br>1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 &amp; 7 &amp; 8 &amp; 9 \\<br>\end{bmatrix}<br>然后将<strong>数据行A</strong>的前三位1,2,3移到<strong>数据行A</strong>的末尾,生成新的一行<strong>数据行B</strong>:<br>\begin{bmatrix}<br>4 &amp; 5 &amp; 6 &amp; 7 &amp; 8 &amp; 9 &amp;1 &amp; 2 &amp; 3 \\<br>\end{bmatrix}<br>然后将<strong>数据行B</strong>的前三位4,5,6移到<strong>数据行B</strong>的末尾,生成新的一行<strong>数据行C</strong>:<br>\begin{bmatrix}<br>7 &amp; 8 &amp; 9 &amp;1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6  \\<br>\end{bmatrix}</p><h2 id="生成块"><a href="#生成块" class="headerlink" title="生成块"></a>生成块</h2><p>再将数据行依次组合，生成一个3行9列的数据块 $X_1$<br>\begin{bmatrix}<br>1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 &amp; 7 &amp; 8 &amp; 9 \\<br>4 &amp; 5 &amp; 6 &amp; 7 &amp; 8 &amp; 9 &amp; 1 &amp; 2 &amp; 3 \\<br>7 &amp; 8 &amp; 9 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6  \\<br>\end{bmatrix}<br>将数据块$X_1$的第一列<br>\begin{bmatrix}<br>1 \\<br>4 \\<br>7  \\<br>\end{bmatrix}<br>移到最后一列生成新的数据块$X_2$<br>\begin{bmatrix}<br> 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 &amp; 7 &amp; 8 &amp; 9 &amp; 1\\<br> 5 &amp; 6 &amp; 7 &amp; 8 &amp; 9 &amp; 1 &amp; 2 &amp; 3 &amp; 4\\<br> 8 &amp; 9 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 &amp; 7\\<br>\end{bmatrix}<br>再将数据块$X_2$的第一列<br>\begin{bmatrix}<br>2 \\<br>5 \\<br>8 \\<br>\end{bmatrix}<br>移到最后一列生成新的数据块$X_3$<br>\begin{bmatrix}<br> 3 &amp; 4 &amp; 5 &amp; 6 &amp; 7 &amp; 8 &amp; 9 &amp; 1 &amp; 2\\<br> 6 &amp; 7 &amp; 8 &amp; 9 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5\\<br> 9 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 &amp; 7 &amp; 8\\<br>\end{bmatrix}<br>再将数据块$X_1$,$X_2$,$X_3$依次组合,就形成了如下图所示的数独$Y_1$。<br>\begin{bmatrix}<br>1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 &amp; 7 &amp; 8 &amp; 9 \\<br>4 &amp; 5 &amp; 6 &amp; 7 &amp; 8 &amp; 9 &amp; 1 &amp; 2 &amp; 3 \\<br>7 &amp; 8 &amp; 9 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 \\<br>2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 &amp; 7 &amp; 8 &amp; 9 &amp; 1 \\<br>5 &amp; 6 &amp; 7 &amp; 8 &amp; 9 &amp; 1 &amp; 2 &amp; 3 &amp; 4 \\<br>8 &amp; 9 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 &amp; 7 \\<br>3 &amp; 4 &amp; 5 &amp; 6 &amp; 7 &amp; 8 &amp; 9 &amp; 1 &amp; 2 \\<br>6 &amp; 7 &amp; 8 &amp; 9 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 \\<br>9 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 &amp; 7 &amp; 8 \\<br>\end{bmatrix}<br>所以说手写数独是很简单的，那怎么样让别人看不出来这是一个手写的?</p><h2 id="行交换"><a href="#行交换" class="headerlink" title="行交换"></a>行交换</h2><p>可以将 <strong>[1,2,3]</strong>行中两两任意互换;<br>可以将 <strong>[4,5,6]</strong>行中两两任意互换;<br>可以将 <strong>[7,8,9]</strong>行中两两任意互换;<br>第一行和第三行交换用 $1\Leftrightarrow3$ 表示。<br>依次执行$1\Leftrightarrow3$ ，$4\Leftrightarrow5$ 和 $8\Leftrightarrow9$<br>生成新的数独$Y_2$。如下:<br>\begin{bmatrix}<br>4 &amp; 5 &amp; 6 &amp; 7 &amp; 8 &amp; 9 &amp; 1 &amp; 2 &amp; 3 \\<br>7 &amp; 8 &amp; 9 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 \\<br>1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 &amp; 7 &amp; 8 &amp; 9 \\<br>5 &amp; 6 &amp; 7 &amp; 8 &amp; 9 &amp; 1 &amp; 2 &amp; 3 &amp; 4 \\<br>2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 &amp; 7 &amp; 8 &amp; 9 &amp; 1 \\<br>8 &amp; 9 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 &amp; 7 \\<br>3 &amp; 4 &amp; 5 &amp; 6 &amp; 7 &amp; 8 &amp; 9 &amp; 1 &amp; 2 \\<br>9 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 &amp; 7 &amp; 8 \\<br>6 &amp; 7 &amp; 8 &amp; 9 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 \\<br>\end{bmatrix}</p><h2 id="列交换"><a href="#列交换" class="headerlink" title="列交换"></a>列交换</h2><p>可以将 <strong>[1,2,3]</strong>列中两两任意互换;<br>可以将 <strong>[4,5,6]</strong>列中两两任意互换;<br>可以将 <strong>[7,8,9]</strong>列中两两任意互换;<br>第一列和第三列交换用 $1\Longleftrightarrow3$ 表示。<br>依次对$Y_2$执行$1\Longleftrightarrow3$ ，$4\Longleftrightarrow5$ 和 $8\Longleftrightarrow9$<br>生成新的数独$Y_3$。如下:<br>\begin{bmatrix}<br>6 &amp; 5 &amp; 4 &amp; 8 &amp; 7 &amp; 9 &amp; 1 &amp; 3 &amp; 2  \\<br>9 &amp; 8 &amp; 7 &amp; 2 &amp; 1 &amp; 3 &amp; 4 &amp; 6 &amp; 5  \\<br>3 &amp; 2 &amp; 1 &amp; 5 &amp; 4 &amp; 6 &amp; 7 &amp; 9 &amp; 8  \\<br>7 &amp; 6 &amp; 5 &amp; 9 &amp; 8 &amp; 1 &amp; 2 &amp; 4 &amp; 3  \\<br>4 &amp; 3 &amp; 2 &amp; 6 &amp; 5 &amp; 7 &amp; 8 &amp; 1 &amp; 9  \\<br>1 &amp; 9 &amp; 8 &amp; 3 &amp; 2 &amp; 4 &amp; 5 &amp; 7 &amp; 6  \\<br>5 &amp; 4 &amp; 3 &amp; 7 &amp; 6 &amp; 8 &amp; 9 &amp; 2 &amp; 1  \\<br>2 &amp; 1 &amp; 9 &amp; 4 &amp; 3 &amp; 5 &amp; 6 &amp; 8 &amp; 7  \\<br>8 &amp; 7 &amp; 6 &amp; 1 &amp; 9 &amp; 2 &amp; 3 &amp; 5 &amp; 4  \\<br>\end{bmatrix}</p><h2 id="数值交换"><a href="#数值交换" class="headerlink" title="数值交换"></a>数值交换</h2><p>将数独$Y_3$中的数字任意两个数字互换局组成了新的数独,如数独$Y_3$的<strong>2</strong>和<strong>7</strong>互换，就生成了新的数独$Y_4$<br>\begin{bmatrix}<br>6 &amp; 5 &amp; 4 &amp; 8 &amp; 2 &amp; 9 &amp; 1 &amp; 3 &amp; 7  \\<br>9 &amp; 8 &amp; 2 &amp; 7 &amp; 1 &amp; 3 &amp; 4 &amp; 6 &amp; 5  \\<br>3 &amp; 7 &amp; 1 &amp; 5 &amp; 4 &amp; 6 &amp; 2 &amp; 9 &amp; 8  \\<br>2 &amp; 6 &amp; 5 &amp; 9 &amp; 8 &amp; 1 &amp; 7 &amp; 4 &amp; 3  \\<br>4 &amp; 3 &amp; 7 &amp; 6 &amp; 5 &amp; 2 &amp; 8 &amp; 1 &amp; 9  \\<br>1 &amp; 9 &amp; 8 &amp; 3 &amp; 7 &amp; 4 &amp; 5 &amp; 2 &amp; 6  \\<br>5 &amp; 4 &amp; 3 &amp; 2 &amp; 6 &amp; 8 &amp; 9 &amp; 7 &amp; 1  \\<br>7 &amp; 1 &amp; 9 &amp; 4 &amp; 3 &amp; 5 &amp; 6 &amp; 8 &amp; 2  \\<br>8 &amp; 2 &amp; 6 &amp; 1 &amp; 9 &amp; 7 &amp; 3 &amp; 5 &amp; 4  \\<br>\end{bmatrix}</p><blockquote><p>行交换，列交换，数值交换次数越多,就越来越没有手写的痕迹。掌握了数独的一个相关规律,手写数独就再是遥不可及的事情。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>该文简单地介绍了手写数独的过程,希望那些对数独感兴趣的人读了这篇文章后有所收获。</p><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://blog.csdn.net/frone/article/details/81170627">如何在hexo中支持Mathjax</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h1&gt;&lt;p&gt;该文目的是简单记载3*3数独的手写过程,并熟悉一下mathjax工具的运用。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class
      
    
    </summary>
    
      <category term="逻辑思维" scheme="https://www.60points.com/categories/%E9%80%BB%E8%BE%91%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="hexo" scheme="https://www.60points.com/tags/hexo/"/>
    
      <category term="mathjax" scheme="https://www.60points.com/tags/mathjax/"/>
    
      <category term="数独" scheme="https://www.60points.com/tags/%E6%95%B0%E7%8B%AC/"/>
    
  </entry>
  
  <entry>
    <title>Hexo画流程图</title>
    <link href="https://www.60points.com/Hexo_flow/"/>
    <id>https://www.60points.com/Hexo_flow/</id>
    <published>2018-11-24T12:10:41.000Z</published>
    <updated>2018-12-13T21:45:13.576Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>该文简单介绍一下在Hexo博客上画流程图。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="mermaid"><a href="#mermaid" class="headerlink" title="mermaid"></a>mermaid</h2><p>安装代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-mermaid-diagrams</span><br></pre></td></tr></table></figure></p><p>打开<strong>themes/next/_config.yml</strong><br>添加以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># mermaid chart</span><br><span class="line">mermaid: ## mermaid url https://github.com/knsv/mermaid</span><br><span class="line">  enable: true  # default true</span><br><span class="line">  version: &quot;7.1.2&quot; # default v7.1.2</span><br><span class="line">  options:  # find more api options from https://github.com/knsv/mermaid/blob/master/src/mermaidAPI.js</span><br><span class="line">    #startOnload: true  // default true</span><br></pre></td></tr></table></figure></p><p>在<strong>themes/next/layout/_partials/footer.swig</strong>最后加上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if (theme.mermaid.enable)  %&#125;</span><br><span class="line">  &lt;script src=&apos;https://cdnjs.cloudflare.com/ajax/libs/mermaid/7.1.2/mermaid.min.js&apos;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    if (window.mermaid) &#123;</span><br><span class="line">      mermaid.initialize(&#123;theme: &apos;forest&apos;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p><p>最后一步修改<strong>根目录的_config.yml</strong>，把external_link的值改为false，默认的为true，这一步绝大多数教程中都没有写。</p><p>mermaid画流程图<br>示例代码</p><blockquote><p>```mermaid<br>graph TD;<br>   起床—&gt;洗漱;<br>   洗漱—&gt;吃早餐;<br>   洗漱—&gt;不吃早餐;<br>   吃早餐—&gt;出门;<br>   不吃早餐—&gt;出门;<br>```  </p></blockquote><p>效果如下</p><pre class="mermaid">graph TD;    起床-->洗漱;    洗漱-->吃早餐;    洗漱-->不吃早餐;    吃早餐-->出门;    不吃早餐-->出门;</pre><h2 id="flow"><a href="#flow" class="headerlink" title="flow"></a>flow</h2><p>安装代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-filter-flowchart</span><br></pre></td></tr></table></figure></p><p>然后无需其余配置<br>flow画流程图示例代码如下</p><blockquote><p>```flow<br>st=&gt;start: Start|past:&gt;<a href="http://www.google.com[blank">http://www.google.com[blank</a>]<br>e=&gt;end: End:&gt;<a href="http://www.google.com">http://www.google.com</a><br>op1=&gt;operation: My Operation|past<br>op2=&gt;operation: Stuff|current<br>sub1=&gt;subroutine: My Subroutine|invalid<br>cond=&gt;condition: Yes<br>or No?|approved:&gt;<a href="http://www.google.com">http://www.google.com</a><br>c2=&gt;condition: Good idea|rejected<br>io=&gt;inputoutput: catch something…|request<br>st-&gt;op1(right)-&gt;cond<br>cond(yes, right)-&gt;c2<br>cond(no)-&gt;sub1(left)-&gt;op1<br>c2(yes)-&gt;io-&gt;e<br>c2(no)-&gt;op2-&gt;e<br>```  </p></blockquote><p>flow画流程图效果如下</p><div id="flowchart-0" class="flow-chart"></div><h2 id="sequence"><a href="#sequence" class="headerlink" title="sequence"></a>sequence</h2><p>安装代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-filter-sequence</span><br></pre></td></tr></table></figure></p><p>然后无需其余配置。<br>sequence 画流程图示例代码</p><blockquote><p>```sequence<br>Alice-&gt;Bob: Hello Bob, how are you?<br>Note right of Bob: Bob thinks<br>Bob—&gt;Alice: I am good thanks!<br>```  </p></blockquote><p>sequence 画流程图效果如下</p><div id="sequence-0"></div><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>相比之下,mermaid的语法最简洁，渲染成图的过程最复杂，配置也最复杂。<br>而flow和sequence相对而言配置简单一点，但是语法复杂一些。</p><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.liuyude.com/How_to_make_your_HEXO_blog_support_handwriting_flowchart.html">如何让你的HEXO博客支持手写流程图？</a><br><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: Start|past:>http://www.google.com[blank]e=>end: End:>http://www.google.comop1=>operation: My Operation|pastop2=>operation: Stuff|currentsub1=>subroutine: My Subroutine|invalidcond=>condition: Yesor No?|approved:>http://www.google.comc2=>condition: Good idea|rejectedio=>inputoutput: catch something...|requestst->op1(right)->condcond(yes, right)->c2cond(no)->sub1(left)->op1c2(yes)->io->ec2(no)->op2->e</textarea><textarea id="flowchart-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><script src="https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">Alice->Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob-->Alice: I am good thanks!</textarea><textarea id="sequence-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h1&gt;&lt;p&gt;该文简单介绍一下在Hexo博客上画流程图。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="Hexo自定义" scheme="https://www.60points.com/categories/Hexo%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    
    
      <category term="hexo" scheme="https://www.60points.com/tags/hexo/"/>
    
      <category term="流程图" scheme="https://www.60points.com/tags/%E6%B5%81%E7%A8%8B%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>hexo 调用share.js</title>
    <link href="https://www.60points.com/hexo_share_to_wechat/"/>
    <id>https://www.60points.com/hexo_share_to_wechat/</id>
    <published>2018-11-24T09:39:56.000Z</published>
    <updated>2018-12-13T22:13:41.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>我本来想做的分享按钮预期效果如下：<br><img src="/hexo_share_to_wechat/share.png" alt="分享图标">,本来也打开了一个实现了该效果的个人网站，结果一不小心关掉了,然后就只能自己动手制作分享功能。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>首先在<strong>themes\next\layout</strong>中新建一个文件<strong>socialshare.swig</strong><br>编辑内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;../lib/jquery/index.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;link href=&quot;https://cdn.bootcss.com/social-share.js/1.0.16/css/share.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/social-share.js/1.0.16/js/jquery.share.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt; var $config = &#123;</span><br><span class="line">      url                 : window.location.href,// 网址，默认使用 window.location.href</span><br><span class="line">      source              : &apos;&apos;, // 来源（QQ空间会用到）, 默认读取head标签：&lt;meta name=&quot;site&quot; content=&quot;http://overtrue&quot; /&gt;</span><br><span class="line">      title               : &apos;&apos;, // 标题，默认读取 document.title 或者 &lt;meta name=&quot;title&quot; content=&quot;share.js&quot; /&gt;</span><br><span class="line">      description         : &apos;&apos;, // 描述, 默认读取head标签：&lt;meta name=&quot;description&quot; content=&quot;PHP弱类型的实现原理分析&quot; /&gt;</span><br><span class="line">      image               : &apos;&apos;, // 图片, 默认取网页中第一个img标签</span><br><span class="line">      sites               : [&apos;qzone&apos;, &apos;qq&apos;, &apos;weibo&apos;,&apos;wechat&apos;], // 启用的站点</span><br><span class="line">      disabled            : [&apos;google&apos;, &apos;facebook&apos;, &apos;twitter&apos;], // 禁用的站点</span><br><span class="line">      wechatQrcodeTitle   : &apos;微信扫一扫：分享&apos;, // 微信二维码提示文字</span><br><span class="line">      wechatQrcodeHelper  : &apos;&lt;p&gt;微信里点“发现”，扫一下&lt;/p&gt;&lt;p&gt;二维码便可将本文分享至朋友圈。&lt;/p&gt;&apos;,</span><br><span class="line">      target : &apos;_blank&apos; //打开方式</span><br><span class="line">  &#125;;</span><br><span class="line">  $(&apos;.social-share&apos;).share($config);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>然后找到<strong>themes\next\layout</strong>中的文件<strong>post.swig</strong>中的这部分代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;footer class=&quot;post-footer&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>之前贴上以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.social_share and not is_index %&#125;</span><br><span class="line">   &#123;% include &apos;../_partials/share/socialshare.swig&apos; %&#125;</span><br><span class="line">  &lt;div class=&quot;social-share&quot;&gt;&lt;/div&gt;  </span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p><p>在主题_config.yml文件中增加以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">social_share:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure></p><p>保存修改后，然后hexo clean ，hexo g ，hexo d 即可看到点击效果。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>虽说分享功能不如我的预期完整,但是也是解决了baidu share组件和赞赏组件冲突的问题。<br>如果有时间,还有兴趣的时候会继续折腾Share.js这个组件。<br>然后希望有已经部署成功的人指点一二，不胜感激。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>于2018年12月14日修正并解决了该问题。</p><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.oschina.net/p/share-js">一键转发工具 Share.js</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h1&gt;&lt;p&gt;我本来想做的分享按钮预期效果如下：&lt;br&gt;&lt;img src=&quot;/hexo_share_to_wechat/share.png&quot; alt=&quot;分享图标&quot;
      
    
    </summary>
    
      <category term="Hexo自定义" scheme="https://www.60points.com/categories/Hexo%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    
    
      <category term="hexo" scheme="https://www.60points.com/tags/hexo/"/>
    
      <category term="朋友圈" scheme="https://www.60points.com/tags/%E6%9C%8B%E5%8F%8B%E5%9C%88/"/>
    
  </entry>
  
  <entry>
    <title>Hexo点击切换文字</title>
    <link href="https://www.60points.com/Hexo_click_change_text/"/>
    <id>https://www.60points.com/Hexo_click_change_text/</id>
    <published>2018-11-24T07:12:43.000Z</published>
    <updated>2018-12-16T04:15:10.279Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>最近在工作中,有幸发现到了<a href="https://www.cnblogs.com/cang12138/p/8992506.html">C# Aspose.Cells.dll Excel操作总结</a>这篇文章。<br>觉得页面的鼠标点击效果还不错,故F12查看了一下源码,迁移到了个人博客网站上面，下面简单介绍一下实现步骤。</p><blockquote><p>希望原作者不要太介意哈~  </p></blockquote><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>在目录<strong>themes\next\source\js\src</strong>下新建<strong>click_show_text.js</strong>文件，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">//单击显示随机文字</span><br><span class="line">var a_idx = 0;</span><br><span class="line">jQuery(document).ready(function($) &#123;</span><br><span class="line">    $(&quot;body&quot;).click(function(e) &#123;</span><br><span class="line">        var a = new Array(</span><br><span class="line">          &quot;若是不专一，生活把你欺&quot;,</span><br><span class="line">          &quot;活得有点二，倾慕大白菜&quot;,</span><br><span class="line">          &quot;爱好只有三，辣和甜和酸&quot;,</span><br><span class="line">          &quot;生日九月四，吃鱼得吐刺&quot;,</span><br><span class="line">          &quot;广州年有五，喜欢吃排骨&quot;, </span><br><span class="line">          &quot;绰号为十六，断烟不断肉&quot;, </span><br><span class="line">          &quot;年龄二十七，就懂零和一&quot;, </span><br><span class="line">          &quot;身高一米八，身边缺个她&quot;,</span><br><span class="line">          &quot;体重一百九，木有女朋友&quot;,</span><br><span class="line">          &quot;二五得一十，爱就得一世&quot;, </span><br><span class="line">          &quot;智商不够百，不怕有人怼&quot;, </span><br><span class="line">          &quot;弱水有三千，一瓢可成仙&quot;, </span><br><span class="line">          &quot;打赏没过万，可悲又可叹&quot;,</span><br><span class="line">          &quot;赚它一个亿，回家去种地&quot;</span><br><span class="line">                );</span><br><span class="line">        var $i = $(&quot;&lt;span/&gt;&quot;).text(a[a_idx]);</span><br><span class="line">        a_idx = (a_idx + 1) % a.length;</span><br><span class="line">        var x = e.pageX,</span><br><span class="line">        y = e.pageY;</span><br><span class="line">        $i.css(&#123;</span><br><span class="line">            &quot;z-index&quot;: 5,</span><br><span class="line">            &quot;top&quot;: y - 20,</span><br><span class="line">            &quot;left&quot;: x,</span><br><span class="line">            &quot;position&quot;: &quot;absolute&quot;,</span><br><span class="line">            &quot;font-weight&quot;: &quot;bold&quot;,</span><br><span class="line">            &quot;color&quot;: &quot;#FF69B4&quot;</span><br><span class="line">        &#125;);</span><br><span class="line">        $(&quot;body&quot;).append($i);</span><br><span class="line">        $i.animate(&#123;</span><br><span class="line">            &quot;top&quot;: y - 180,</span><br><span class="line">            &quot;opacity&quot;: 0</span><br><span class="line">        &#125;,</span><br><span class="line">3000,</span><br><span class="line">function() &#123;</span><br><span class="line">    $i.remove();</span><br><span class="line">&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    setTimeout(&apos;delay()&apos;, 2000);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function delay() &#123;</span><br><span class="line">    $(&quot;.buryit&quot;).removeAttr(&quot;onclick&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体要闪烁的文字，请自行替换。<br>然后在<strong>themes\next\layout\_layout.swig</strong>文件中 <strong>&lt;/body&gt;</strong>前添加以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--单击显示文字--&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/click_show_text.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后hexo clean ，hexo g ，hexo d 即可看到点击效果。</p><blockquote><p>注意：该事件可能和其余鼠标点击效果冲突。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这是我自行做的页面优化，个人感觉还挺不错。</p><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.cnblogs.com/cang12138/p/8992506.html">C# Aspose.Cells.dll Excel操作总结</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h1&gt;&lt;p&gt;最近在工作中,有幸发现到了&lt;a href=&quot;https://www.cnblogs.com/cang12138/p/8992506.html&quot;&gt;C#
      
    
    </summary>
    
      <category term="Hexo自定义" scheme="https://www.60points.com/categories/Hexo%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    
    
      <category term="hexo" scheme="https://www.60points.com/tags/hexo/"/>
    
      <category term="鼠标效果" scheme="https://www.60points.com/tags/%E9%BC%A0%E6%A0%87%E6%95%88%E6%9E%9C/"/>
    
      <category term="文字切换" scheme="https://www.60points.com/tags/%E6%96%87%E5%AD%97%E5%88%87%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hexo宠物插件</title>
    <link href="https://www.60points.com/Hexo%E5%AE%A0%E7%89%A9%E6%8F%92%E4%BB%B6/"/>
    <id>https://www.60points.com/Hexo宠物插件/</id>
    <published>2018-11-24T06:49:26.000Z</published>
    <updated>2018-11-24T07:02:41.068Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>参考了<a href="https://blog.csdn.net/qq_43020645/article/details/82794092">hexo 增添宠物</a>这篇文章，但是其内容有相应的遗漏，故写下该文章，以作补充。</p><h1 id="完整步骤"><a href="#完整步骤" class="headerlink" title="完整步骤"></a>完整步骤</h1><p>在终端切换到你的博客的路径里，然后输入如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -save hexo-helper-live2d</span><br></pre></td></tr></table></figure></p><p>然后打开选择下面一个萌宠或萌妹子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">live2d-widget-model-chitose</span><br><span class="line">live2d-widget-model-epsilon2_1</span><br><span class="line">live2d-widget-model-gf</span><br><span class="line">live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haruto</span><br><span class="line">live2d-widget-model-hibiki</span><br><span class="line">live2d-widget-model-hijiki</span><br><span class="line">live2d-widget-model-izumi</span><br><span class="line">live2d-widget-model-koharu</span><br><span class="line">live2d-widget-model-miku</span><br><span class="line">live2d-widget-model-ni-j</span><br><span class="line">live2d-widget-model-nico</span><br><span class="line">live2d-widget-model-nietzsche</span><br><span class="line">live2d-widget-model-nipsilon</span><br><span class="line">live2d-widget-model-nito</span><br><span class="line">live2d-widget-model-shizuku</span><br><span class="line">live2d-widget-model-tororo</span><br><span class="line">live2d-widget-model-tsumiki</span><br><span class="line">live2d-widget-model-unitychan</span><br><span class="line">live2d-widget-model-wanko</span><br><span class="line">live2d-widget-model-z16</span><br></pre></td></tr></table></figure></p><p>如果你选择的是live2d-widget-model-wanko<br>则需要在命令行执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -save live2d-widget-model-wanko</span><br></pre></td></tr></table></figure></p><p><font color="#FF0000">参考文章中没有以上这一步。</font><br>然后再在 hexo 的 _config.yml中添加参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-wanko</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 140</span><br><span class="line">    height: 260</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br></pre></td></tr></table></figure></p><p>然后hexo clean ，hexo g ，hexo d 即可  </p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://blog.csdn.net/qq_43020645/article/details/82794092">hexo 增添宠物</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h1&gt;&lt;p&gt;参考了&lt;a href=&quot;https://blog.csdn.net/qq_43020645/article/details/82794092&quot;&gt;he
      
    
    </summary>
    
      <category term="Hexo自定义" scheme="https://www.60points.com/categories/Hexo%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    
    
      <category term="hexo" scheme="https://www.60points.com/tags/hexo/"/>
    
      <category term="宠物" scheme="https://www.60points.com/tags/%E5%AE%A0%E7%89%A9/"/>
    
  </entry>
  
  <entry>
    <title>欢乐斗地主出牌方式统计</title>
    <link href="https://www.60points.com/Fight-the-Landlord-Card-Type-Aanalysis/"/>
    <id>https://www.60points.com/Fight-the-Landlord-Card-Type-Aanalysis/</id>
    <published>2018-11-18T05:30:53.000Z</published>
    <updated>2018-11-29T16:25:06.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>在<a href="https://ddabb.github.io/wiki/from_list_S_take_N_numbers_make_sum_K/">集合S取出n个元素其和为K个数统计</a>这篇文章中提到了笛卡尔积的这种解法，但是以笛卡尔积的方式求解的时候，我中午点击运行，我晚上回来的时候才输出了168条牌型组合，然后一直没有响应，后来粗略估算了一下，需要在1.44E+18条左右数据中进行筛选，而选出总手牌数为20条相当于大海捞针，所以需要重新对问题进行思考。<br>先将问题明确定义——<strong>“在N张手牌中，可能的出牌方式有多少种？”</strong></p><h1 id="牌型分析"><a href="#牌型分析" class="headerlink" title="牌型分析"></a>牌型分析</h1><p>以地主20张手牌为例,20张手牌可能1个炸弹也没有，最多有5个炸弹。所以20张手牌,炸弹的取值范围的取值范围是[0,5];<br>而3张相同的牌带1张单牌也是四张牌,所以20张手牌，出三张相同的牌带一张单牌的次数也是[0,5];<br>如果手牌中存在66667777这样的四张牌,6667和7776这种打法和一个6炸和7炸是两种打牌的方式。<br>同样就算是以6,6,6,6,7,7,7,7这样的8张单牌一次打出去，欺负下家或上家手里只有3,4,5了也不是不可以。<br>所以66667777这样8张牌在不考虑输赢的情况下也是有很多种打法的。而巧的是，我们讨论的是不考虑输赢的情况。  </p><p>20张手牌有几种打出去的方式呢？    </p><blockquote><p>最多以20次单牌的形式打出去。<br>最多以10次对子的形式打出去。<br>最多以3次三连对的形式打出去。<br>依次类推，有了以下的表格：    </p></blockquote><p><img src="/Fight-the-Landlord-Card-Type-Aanalysis/牌型组合.png" alt="可能的牌型组合"></p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><p>请下载<a href="Program.cs">C#版源代码</a>,放到对应的控制台去执行即可。<br>这里列举几个示例结果：<br>手牌数为1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">手牌数为1时,可能的打法情况为:</span><br><span class="line">1:  牌型为：单张,每次消耗1,出了1次,共消耗掉1张牌</span><br><span class="line">所有牌型列举完成</span><br></pre></td></tr></table></figure></p><p>手牌数为2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">手牌数为2时,可能的打法情况为:</span><br><span class="line">1:  牌型为：王炸,每次消耗2,出了1次,共消耗掉2张牌</span><br><span class="line">2:  牌型为：对子,每次消耗2,出了1次,共消耗掉2张牌</span><br><span class="line">3:  牌型为：单张,每次消耗1,出了2次,共消耗掉2张牌</span><br><span class="line">所有牌型列举完成</span><br></pre></td></tr></table></figure></p><p>手牌数为3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">手牌数为3时,可能的打法情况为:</span><br><span class="line">1:  牌型为：3张牌,每次消耗3,出了1次,共消耗掉3张牌</span><br><span class="line">2:  牌型为：单张,每次消耗1,出了1次,共消耗掉1张牌    牌型为：王炸,每次消耗2,出了1次,共消耗掉2张牌</span><br><span class="line">3:  牌型为：单张,每次消耗1,出了1次,共消耗掉1张牌    牌型为：对子,每次消耗2,出了1次,共消耗掉2张牌</span><br><span class="line">4:  牌型为：单张,每次消耗1,出了3次,共消耗掉3张牌</span><br><span class="line">所有牌型列举完成</span><br></pre></td></tr></table></figure></p><p>手牌数为4<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">手牌数为4时,可能的打法情况为:</span><br><span class="line">1:  牌型为：炸弹,每次消耗4,出了1次,共消耗掉4张牌</span><br><span class="line">2:  牌型为：3张牌带1张,每次消耗4,出了1次,共消耗掉4张牌</span><br><span class="line">3:  牌型为：对子,每次消耗2,出了1次,共消耗掉2张牌    牌型为：王炸,每次消耗2,出了1次,共消耗掉2张牌</span><br><span class="line">4:  牌型为：对子,每次消耗2,出了2次,共消耗掉4张牌</span><br><span class="line">5:  牌型为：单张,每次消耗1,出了1次,共消耗掉1张牌    牌型为：3张牌,每次消耗3,出了1次,共消耗掉3张牌</span><br><span class="line">6:  牌型为：单张,每次消耗1,出了2次,共消耗掉2张牌    牌型为：王炸,每次消耗2,出了1次,共消耗掉2张牌</span><br><span class="line">7:  牌型为：单张,每次消耗1,出了2次,共消耗掉2张牌    牌型为：对子,每次消耗2,出了1次,共消耗掉2张牌</span><br><span class="line">8:  牌型为：单张,每次消耗1,出了4次,共消耗掉4张牌</span><br><span class="line">所有牌型列举完成</span><br></pre></td></tr></table></figure></p><p><strong>根据以上结果中的示例2和示例5可知，就算是7778也可以以777和8分两次打出去。</strong><br>手牌数为5<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">手牌数为5时,可能的打法情况为:</span><br><span class="line">1:  牌型为：5张牌的顺子,每次消耗5,出了1次,共消耗掉5张牌</span><br><span class="line">2:  牌型为：3张牌带1对,每次消耗5,出了1次,共消耗掉5张牌</span><br><span class="line">3:  牌型为：3张牌,每次消耗3,出了1次,共消耗掉3张牌    牌型为：王炸,每次消耗2,出了1次,共消耗掉2张牌</span><br><span class="line">4:  牌型为：对子,每次消耗2,出了1次,共消耗掉2张牌    牌型为：3张牌,每次消耗3,出了1次,共消耗掉3张牌</span><br><span class="line">5:  牌型为：单张,每次消耗1,出了1次,共消耗掉1张牌    牌型为：炸弹,每次消耗4,出了1次,共消耗掉4张牌</span><br><span class="line">6:  牌型为：单张,每次消耗1,出了1次,共消耗掉1张牌    牌型为：3张牌带1张,每次消耗4,出了1次,共消耗掉4张牌</span><br><span class="line">7:  牌型为：单张,每次消耗1,出了1次,共消耗掉1张牌    牌型为：对子,每次消耗2,出了1次,共消耗掉2张牌    牌型为：王炸,每次消耗2,出了1次,共消耗掉2张牌</span><br><span class="line">8:  牌型为：单张,每次消耗1,出了1次,共消耗掉1张牌    牌型为：对子,每次消耗2,出了2次,共消耗掉4张牌</span><br><span class="line">9:  牌型为：单张,每次消耗1,出了2次,共消耗掉2张牌    牌型为：3张牌,每次消耗3,出了1次,共消耗掉3张牌</span><br><span class="line">10:  牌型为：单张,每次消耗1,出了3次,共消耗掉3张牌    牌型为：王炸,每次消耗2,出了1次,共消耗掉2张牌</span><br><span class="line">11:  牌型为：单张,每次消耗1,出了3次,共消耗掉3张牌    牌型为：对子,每次消耗2,出了1次,共消耗掉2张牌</span><br><span class="line">12:  牌型为：单张,每次消耗1,出了5次,共消耗掉5张牌</span><br><span class="line">所有牌型列举完成</span><br></pre></td></tr></table></figure></p><p>限于篇幅，不再一一列举，根据程序列举出来的可能性如下图所示:   </p><p><img src="/Fight-the-Landlord-Card-Type-Aanalysis/手牌方式统计.png" alt="手牌为N时,可以的出牌方式统计"></p><p>可知有17张手牌时,可以有1729种出牌方式。<br>可知有20张手牌时,可以有4815种出牌方式。<br>也许基于此，就有了赌徒说搏一搏，单车变摩托的说法。</p><blockquote><font color="#FF0000">注意,20张手牌的出牌方式并不能达到4815种，一个12张牌的顺子是12张牌,而再来两个炸弹8张牌，加起来也是20张牌。但是去掉3~A的12张牌，只能算出"2222"一个炸弹了。即"12张牌的顺子和2个炸弹"虽说符合代码的逻辑，但是并不符合现实中的牌型。换句话说，参考资料中的代码并没有考虑这种情况。</font>  </blockquote><p><strong>问题是还有哪些牌型组合在一起能满足总手牌数，但是不符合现实中的牌型呢？</strong></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本以为在计算{1,2,3,4}中取出任意个数，与取出顺序无关时使用笛卡尔积的方式是很好的方式；结果在该问题中待处理数据竟达到了1.44E+18(1.44乘以10的18次方)条之多。<br>由此可知，问题并不是想当然就能够得到解决的，实践永远是检验真理的标准。<br>如果在每种牌型设置其对应的权重,所以在AI中的斗地主，如果能检测出手牌是10连对,或333444555666777带789JQ类型,得赶紧明牌不是么？</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://ddabb.github.io/from_list_S_take_N_numbers_make_sum_K/">集合S取出n个元素其和为K个数统计</a></li><li><a href="Program.cs">C#版源代码</a></li><li><a href="牌型组合.xlsx">牌型组合excel</a></li><li><a href="https://www.60points.com/combination/">m个球放到n个箱子中几种解法</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h1&gt;&lt;p&gt;在&lt;a href=&quot;https://ddabb.github.io/wiki/from_list_S_take_N_numbers_make_sum
      
    
    </summary>
    
      <category term="逻辑思维" scheme="https://www.60points.com/categories/%E9%80%BB%E8%BE%91%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="欢乐斗地主" scheme="https://www.60points.com/tags/%E6%AC%A2%E4%B9%90%E6%96%97%E5%9C%B0%E4%B8%BB/"/>
    
  </entry>
  
  <entry>
    <title>集合S取出n个元素其和为K个数统计</title>
    <link href="https://www.60points.com/from_list_S_take_N_numbers_make_sum_K/"/>
    <id>https://www.60points.com/from_list_S_take_N_numbers_make_sum_K/</id>
    <published>2018-11-17T00:17:17.000Z</published>
    <updated>2018-11-29T16:24:15.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>最近csrediscore的创作者在制作一个斗地主的机器人,他探讨性地给我出了一个问题——<strong>怎么样去统计手牌组合的可能性？</strong><br>该问题算是比较复杂的,在不考虑癞子的情况下有<strong>火箭、炸弹、单牌、对牌、连对、三张牌、三带一、单顺、双顺、三顺、飞机带翅膀、四带二</strong>等等牌型。<br>以地主20张手牌为例：</p><ul><li>20张手牌中能打出火箭次数在[0,1]中取值。</li><li>20张手牌中能打出炸弹次数在[0,5]中取值。</li><li>20张手牌中能打出单牌次数在[0,20]中取值——在不考虑其他玩家的情况下,最多出20次单牌。</li><li>依次类推…………<br>所以问题转换为<strong>每种牌型中选取任意次数构成N张手牌的情况有多少种？</strong></li></ul><h1 id="问题分解一"><a href="#问题分解一" class="headerlink" title="问题分解一"></a>问题分解一</h1><p>为了更加简单一点描述问题,我继续对问题进行了简化。<br><strong>从集合{1,2,3,4}中,取出一个元素和为10的个数统计</strong><br>比如集合为：{1,2,3,4}，和值为10；其中取法1,2,3,4和4,3,2,1等价。<br>因和值固定，且都为正数，所以每个元素的取出次数有限，可以得出结论如下图<br><img src="/from_list_S_take_N_numbers_make_sum_K/1234_10.png" alt="1,2,3,4可以取出次数分析">  </p><h1 id="问题分解二"><a href="#问题分解二" class="headerlink" title="问题分解二"></a>问题分解二</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">从集合</span><br><span class="line">&#123;0,1,2,3,4,5,6,7,8,9,10&#125;,</span><br><span class="line">&#123;0,2,4,6,8,10&#125;,</span><br><span class="line">&#123;0,3,6,9&#125;,</span><br><span class="line">&#123;0,4,8&#125;</span><br><span class="line">中各取出一个元素组成新集合S1,S1求和为10的个数统计。</span><br></pre></td></tr></table></figure><p>由图可知,可以取出的元素组合情况为:  11 *  6 * 4 * 3=792种。</p><p>最终只需要在这792种方案中选取出和为10的记录。<br>罗列792种方案的可行性的过程叫做求笛卡尔积,以下给出代码实现C#版代码实现过程。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>求笛卡尔积扩展类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static class EnumerableEx</span><br><span class="line">&#123;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 求集合的笛卡尔积</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public static IEnumerable&lt;IEnumerable&lt;T&gt;&gt; Cartesian&lt;T&gt;(this IEnumerable&lt;IEnumerable&lt;T&gt;&gt; sequences)</span><br><span class="line">    &#123;</span><br><span class="line">        IEnumerable&lt;IEnumerable&lt;T&gt;&gt; tempProduct = new[] &#123;Enumerable.Empty&lt;T&gt;()&#125;;</span><br><span class="line">        return sequences.Aggregate(tempProduct,</span><br><span class="line">            (current, sequence) =&gt;</span><br><span class="line">                (from accseq in current from item in sequence select accseq.Concat(new[] &#123;item&#125;)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建数字集合类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">  /// 数字集合</span><br><span class="line">  /// &lt;/summary&gt;</span><br><span class="line">  public class DigitGroup</span><br><span class="line">  &#123;</span><br><span class="line">      /// &lt;summary&gt;</span><br><span class="line">      /// 元素</span><br><span class="line">      /// &lt;/summary&gt;</span><br><span class="line">      public int Value;</span><br><span class="line"></span><br><span class="line">      /// &lt;summary&gt;</span><br><span class="line">      /// 次数</span><br><span class="line">      /// &lt;/summary&gt;</span><br><span class="line">      public int Times;</span><br><span class="line"></span><br><span class="line">      /// &lt;summary&gt;</span><br><span class="line">      /// 和</span><br><span class="line">      /// &lt;/summary&gt;</span><br><span class="line">      public int Sum;</span><br><span class="line"></span><br><span class="line">      public DigitGroup(int value, int times)</span><br><span class="line">      &#123;</span><br><span class="line">          this.Value = value;</span><br><span class="line">          this.Times = times;</span><br><span class="line">          this.Sum = value * times;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      public override string ToString()</span><br><span class="line">      &#123;</span><br><span class="line">          return string.Format(&quot;&#123;0&#125;个&#123;1&#125;,和为&#123;2&#125;&quot;, Times, Value, Sum);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>控制台Program类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">class Program</span><br><span class="line">  &#123;</span><br><span class="line">      static void Main(string[] args)</span><br><span class="line">      &#123;</span><br><span class="line">          List&lt;int&gt; numbers = new List&lt;int&gt; &#123;1, 2, 3, 4&#125;;</span><br><span class="line">          int Sum = 10;</span><br><span class="line">          var digitGroupList = GetChooseList(numbers, Sum);</span><br><span class="line"></span><br><span class="line">          var result = digitGroupList.Cartesian();</span><br><span class="line">          result = result.Where(chooses =&gt; chooses.Sum(choose =&gt; choose.Sum) == Sum);</span><br><span class="line">          PrintResult(result);</span><br><span class="line"></span><br><span class="line">          Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      private static IEnumerable&lt;IEnumerable&lt;DigitGroup&gt;&gt; GetChooseList(List&lt;int&gt; intList, int target)</span><br><span class="line">      &#123;</span><br><span class="line">          List&lt;List&lt;DigitGroup&gt;&gt; newList = new List&lt;List&lt;DigitGroup&gt;&gt;();</span><br><span class="line">          foreach (var beichushu in intList)</span><br><span class="line">          &#123;</span><br><span class="line">              List&lt;DigitGroup&gt; temp = new List&lt;DigitGroup&gt;();</span><br><span class="line">              var count = target / beichushu;</span><br><span class="line">              for (int i = 0; i &lt;= count; i++)</span><br><span class="line">              &#123;</span><br><span class="line">                  temp.Add(new DigitGroup(beichushu, i));</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              newList.Add(temp);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          return newList;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      private static void PrintResult(IEnumerable&lt;IEnumerable&lt;DigitGroup&gt;&gt; result)</span><br><span class="line">      &#123;</span><br><span class="line">          int index = 0;</span><br><span class="line">          foreach (var list in result)</span><br><span class="line">          &#123;</span><br><span class="line">              index += 1;</span><br><span class="line">              Console.Write(index + &quot;: &quot;);</span><br><span class="line">              foreach (var choose in list)</span><br><span class="line">              &#123;</span><br><span class="line">                  if (choose.Sum != 0)</span><br><span class="line">                  &#123;</span><br><span class="line">                      Console.Write(&quot; &quot; + choose + &quot;   &quot;);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              Console.WriteLine();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>最终运行结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1:  2个3,和为6    1个4,和为4</span><br><span class="line">2:  1个2,和为2    2个4,和为8</span><br><span class="line">3:  2个2,和为4    2个3,和为6</span><br><span class="line">4:  3个2,和为6    1个4,和为4</span><br><span class="line">5:  5个2,和为10</span><br><span class="line">6:  1个1,和为1    3个3,和为9</span><br><span class="line">7:  1个1,和为1    1个2,和为2    1个3,和为3    1个4,和为4</span><br><span class="line">8:  1个1,和为1    3个2,和为6    1个3,和为3</span><br><span class="line">9:  2个1,和为2    2个4,和为8</span><br><span class="line">10:  2个1,和为2    1个2,和为2    2个3,和为6</span><br><span class="line">11:  2个1,和为2    2个2,和为4    1个4,和为4</span><br><span class="line">12:  2个1,和为2    4个2,和为8</span><br><span class="line">13:  3个1,和为3    1个3,和为3    1个4,和为4</span><br><span class="line">14:  3个1,和为3    2个2,和为4    1个3,和为3</span><br><span class="line">15:  4个1,和为4    2个3,和为6</span><br><span class="line">16:  4个1,和为4    1个2,和为2    1个4,和为4</span><br><span class="line">17:  4个1,和为4    3个2,和为6</span><br><span class="line">18:  5个1,和为5    1个2,和为2    1个3,和为3</span><br><span class="line">19:  6个1,和为6    1个4,和为4</span><br><span class="line">20:  6个1,和为6    2个2,和为4</span><br><span class="line">21:  7个1,和为7    1个3,和为3</span><br><span class="line">22:  8个1,和为8    1个2,和为2</span><br><span class="line">23:  10个1,和为10</span><br></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>  我现在依旧不知道20张手牌,各种牌型组合的可能性有多少种,但是将问题转化成{1,2,3,4}求和为10的这种方式已经将问题做了一个很好的分解。<br>  只需要将DigitGroup再做一下相应的替换就可以计算出可能的牌型有多少种，该问题的求解已经不在该文的范畴类，有兴趣的读者可以尝试解决一下。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.cnblogs.com/localhost2016/p/8668355.html">C# 用Linq的方式实现组合和笛卡尔积（支持泛型T）</a></li><li><a href="https://ddabb.github.io/Fight-the-Landlord-Card-Type-Aanalysis/">欢乐斗地主出牌方式统计</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h1&gt;&lt;p&gt;最近csrediscore的创作者在制作一个斗地主的机器人,他探讨性地给我出了一个问题——&lt;strong&gt;怎么样去统计手牌组合的可能性？&lt;/stro
      
    
    </summary>
    
      <category term="逻辑思维" scheme="https://www.60points.com/categories/%E9%80%BB%E8%BE%91%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="笛卡尔积" scheme="https://www.60points.com/tags/%E7%AC%9B%E5%8D%A1%E5%B0%94%E7%A7%AF/"/>
    
      <category term="斗地主" scheme="https://www.60points.com/tags/%E6%96%97%E5%9C%B0%E4%B8%BB/"/>
    
  </entry>
  
  <entry>
    <title>Hexo站点统计</title>
    <link href="https://www.60points.com/Hexo%E7%AB%99%E7%82%B9%E7%BB%9F%E8%AE%A1/"/>
    <id>https://www.60points.com/Hexo站点统计/</id>
    <published>2018-11-14T14:01:45.000Z</published>
    <updated>2018-11-24T07:14:05.147Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>页脚的总访问人数和单页访问人数显示不正常。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>查找<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>替换成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>即可  </p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://busuanzi.ibruce.info/">busuanzi.ibruce.info</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;页脚的总访问人数和单页访问人数显示不正常。&lt;/p&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="Hexo自定义" scheme="https://www.60points.com/categories/Hexo%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    
    
      <category term="hexo" scheme="https://www.60points.com/tags/hexo/"/>
    
      <category term="不蒜子" scheme="https://www.60points.com/tags/%E4%B8%8D%E8%92%9C%E5%AD%90/"/>
    
      <category term="统计数量" scheme="https://www.60points.com/tags/%E7%BB%9F%E8%AE%A1%E6%95%B0%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>欢迎来到他山之石</title>
    <link href="https://www.60points.com/index/"/>
    <id>https://www.60points.com/index/</id>
    <published>2018-11-12T06:09:35.000Z</published>
    <updated>2018-12-04T15:29:02.636Z</updated>
    
    <content type="html"><![CDATA[<h3 id="逻辑思维"><a href="#逻辑思维" class="headerlink" title="逻辑思维"></a><a href="https://ddabb.github.io/categories/逻辑思维/">逻辑思维</a></h3><p><a href="https://ddabb.github.io/字典数排序/">字典数排序</a><br><a href="https://ddabb.github.io/人狼羊菜2012年版本/">人狼羊菜2012年版本</a><br><a href="https://ddabb.github.io/人狼羊菜2018年过程版本/">人狼羊菜2018年过程版本</a><br><a href="https://ddabb.github.io/人狼羊菜2018年对象版本/">人狼羊菜2018年对象版本</a>  </p><h3 id="IT经验"><a href="#IT经验" class="headerlink" title="IT经验"></a><a href="https://ddabb.github.io/categories/IT经验/">IT经验</a></h3><p><a href="https://ddabb.github.io/hexo_written_站点统计/">修正站点次数统计的bug</a><br><a href="https://ddabb.github.io/怎么学习C/">怎么学习C++</a><br><a href="https://ddabb.github.io/第一个AI应用/">第一个AI应用</a><br><a href="https://ddabb.github.io/如无必要勿增实体/">如无必要,勿增实体</a></p><h3 id="他山之石"><a href="#他山之石" class="headerlink" title="他山之石"></a><a href="https://ddabb.github.io/categories/他山之石/">他山之石</a></h3><p><a href="https://ddabb.github.io/我们工作到底为了什么/">我们工作到底为了什么</a><br><a href="https://ddabb.github.io/放过犀利哥，别拿乞丐不当人/">放过犀利哥，别拿乞丐不当人</a><br><a href="https://ddabb.github.io/九一八：我们拿什么来爱国/">九一八：我们拿什么来爱国</a><br><a href="https://ddabb.github.io/效率极低人群之七大习惯/">效率极低人群之七大习惯</a> </p><h3 id="生活感悟"><a href="#生活感悟" class="headerlink" title="生活感悟"></a><a href="https://ddabb.github.io/categories/生活感悟/">生活感悟</a></h3><p><a href="https://ddabb.github.io/520的故事/">520的故事</a><br><a href="https://ddabb.github.io/浅谈倾听/">浅谈倾听</a><br><a href="https://ddabb.github.io/野蛮何以成为文明的幌子/">野蛮何以成为文明的幌子</a><br><a href="https://ddabb.github.io/那爱情经不起等待/">那爱情,经不起等待</a><br><a href="https://ddabb.github.io/虚荣心促进经济发展/">虚荣心，促进经济发展</a><br><a href="https://ddabb.github.io/TheManFromEarth/">这个男人来自地球——观后感</a>  </p><h3 id="关于本站点"><a href="#关于本站点" class="headerlink" title="关于本站点"></a>关于本站点</h3><p><a href="https://ddabb.github.io/建站原因/">建站原因</a><br><a href="https://ddabb.github.io/怎么样搭建一个博客网站/">怎么样搭建一个博客网站</a>  </p><h3 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h3><p><a href="https://ddabb.github.io/vio/">个人简历</a><br><a href="https://ddabb.github.io/contactme/">联系方式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;逻辑思维&quot;&gt;&lt;a href=&quot;#逻辑思维&quot; class=&quot;headerlink&quot; title=&quot;逻辑思维&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://ddabb.github.io/categories/逻辑思维/&quot;&gt;逻辑思维&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="网站简介" scheme="https://www.60points.com/tags/%E7%BD%91%E7%AB%99%E7%AE%80%E4%BB%8B/"/>
    
  </entry>
  
  <entry>
    <title>第一个AI应用</title>
    <link href="https://www.60points.com/%E7%AC%AC%E4%B8%80%E4%B8%AAAI%E5%BA%94%E7%94%A8/"/>
    <id>https://www.60points.com/第一个AI应用/</id>
    <published>2018-11-11T11:25:27.000Z</published>
    <updated>2018-11-22T15:53:50.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>我的第一个AI应用是参考<a href="https://cloud.tencent.com/developer/article/1348205">实战：从0搭建完整 AI 开发环境写出第一个 AI 应用</a>和<a href="http://www.cnblogs.com/ms-uap/p/9123033.html">AI应用开发实战 - 从零开始配置环境</a>两篇文章进行的实施,故以该文做出相应的补充。</p><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><h2 id="‘python’-不是内部或外部变量"><a href="#‘python’-不是内部或外部变量" class="headerlink" title="‘python’ 不是内部或外部变量"></a>‘python’ 不是内部或外部变量</h2><p>命令行执行<strong>python —version</strong>提示’python’ 不是内部或外部变量，在命令行中输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set PATH=&quot;C:\Program Files (x86)\Microsoft Visual Studio\Shared\Python36_64&quot;;%PATH%</span><br></pre></td></tr></table></figure></p><p>之后,再输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure></p><p>输出版本为3.6.5<br>但是关闭命令行之后，再输入python —version时,依旧提示 <strong>‘python’ 不是内部或外部变量</strong>。<br>故在计算机→属性右键→高级系统设置→环境变量→选择<strong>PATH</strong>→点击新建→将<strong>C:\Program Files (x86)\Microsoft Visual Studio\Shared\Python36_64</strong>添加→确定，之后再运行python —version，显示正常。</p><h2 id="saved-model-pb路径不对"><a href="#saved-model-pb路径不对" class="headerlink" title="saved_model.pb路径不对"></a>saved_model.pb路径不对</h2><p>单独参考第一篇文章进行配置时，发现没有<strong>samples-for-ai\export\saved_model.pb</strong>这个路径。<br>原因是没有启动<strong>examples\tensorflow\TensorflowExamples.sln</strong>这个解决方案，将MNIST项目设置为启动项目并运行,则会有samples-for-ai\export\saved_model.pb这个文件了。</p><h2 id="命令行无响应"><a href="#命令行无响应" class="headerlink" title="命令行无响应"></a>命令行无响应</h2><p>安装<strong>scipy-1.1.0</strong>和<strong>mxnet_cu90-1.2.0</strong>时,命令行一直无响应,解决方案是到<a href="https://pypi.org/project/scipy/1.1.0/">scipy-1.1.0</a>和<a href="https://pypi.org/project/mxnet-cu90/1.2.0/">mxnet-cu90 1.2.0</a>下载指定的文件，然后通过pip3命令来执行安装，其余问题也可以通过类似命令来解决。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install D:\scipy-1.1.0-cp36-none-win_amd64.whl</span><br><span class="line">pip3 install D:\mxnet_cu90-1.2.0-py2.py3-none-win_amd64.whl</span><br></pre></td></tr></table></figure><p>通过下载的文件可以得知，文件较大，命令行无法及时完成下载,所以<strong>需要有一定的耐心等待</strong></p><blockquote><p>注意需要将<strong>C:\Program Files (x86)\Microsoft Visual Studio\Shared\Python36_64\Scripts</strong>添加到<strong>PATH变量</strong>中。</p></blockquote><h2 id="cudnn版本不对"><a href="#cudnn版本不对" class="headerlink" title="cudnn版本不对"></a>cudnn版本不对</h2><p>现在官网<a href="https://developer.nvidia.com/cudnn">https://developer.nvidia.com/cudnn</a>提供的cudnn版本是7.4.1,而微软示例代码中的cudnn版本是7.0.3,高版本的cudnn也会导致编译失败，需要找低版本的7.0.<em>的cudnn替换到<em>*C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\bin\cudnn64_7.dll</em></em>  </p><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p>解决了这部分问题之后,能正常展示winform界面，运行结果如下:<br><img src="/第一个AI应用/正确.png" alt="正确识别"><br><img src="/第一个AI应用/错误.png" alt="错误识别"><br>该部分涉及到训练模型是否足够多的问题，该文不做深入的研究。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>参考资料中提及的两篇文章都已经是做<strong>手写识别</strong>非常好的入门资料，该文仅仅是对这两篇文章做一个相应的补充，以作备忘。<br>另外我希望早日掌握以下技能</p><blockquote><p>识别<strong>开心消消乐</strong>的游戏界面，然后通过能够确定执行的最佳下一步，达到这个目的，我觉得我对人工智能的了解和我的AI编程就进入了新的层次了。</p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://cloud.tencent.com/developer/article/1348205">实战：从0搭建完整 AI 开发环境写出第一个 AI 应用</a></li><li><a href="http://www.cnblogs.com/ms-uap/p/9123033.html">AI应用开发实战 - 从零开始配置环境</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h1&gt;&lt;p&gt;我的第一个AI应用是参考&lt;a href=&quot;https://cloud.tencent.com/developer/article/1348205&quot;&gt;
      
    
    </summary>
    
      <category term="IT经验" scheme="https://www.60points.com/categories/IT%E7%BB%8F%E9%AA%8C/"/>
    
      <category term="人工智能" scheme="https://www.60points.com/categories/IT%E7%BB%8F%E9%AA%8C/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="原创" scheme="https://www.60points.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="python" scheme="https://www.60points.com/tags/python/"/>
    
      <category term="手写识别" scheme="https://www.60points.com/tags/%E6%89%8B%E5%86%99%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>我的简历</title>
    <link href="https://www.60points.com/bio/"/>
    <id>https://www.60points.com/bio/</id>
    <published>2018-11-11T06:09:35.000Z</published>
    <updated>2018-11-20T15:39:47.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="个人基本信息"><a href="#个人基本信息" class="headerlink" title="个人基本信息"></a>个人基本信息</h1><ul><li><strong>姓名</strong> 刘石丰</li><li><strong>性别</strong> 男</li><li><strong>学历</strong> 本科</li><li><strong>专业</strong> 电子信息工程</li><li><strong>院校</strong> 中南林业科技大学</li><li><strong>政治面貌</strong> 人民群众</li><li><strong>所在城市</strong> 广东广州</li><li><strong>移动电话</strong> 18664891357</li><li><strong>电子邮件</strong> 417144452@qq.com</li><li><strong>Github</strong> @ddabb</li><li><strong>个人博客</strong> <a href="https://ddabb.github.io">https://ddabb.github.io</a></li><li><strong>求职状态</strong> 在职，无离职意向<h1 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h1>2013年07月-2015年10月 广州市睿明计算机科技有限公司<br>2015年11月-2016年10月 <a href="http://www.anta.com">中国（安踏）有限公司</a><br>2016年10月-2018年04月 <a href="http://www.boykee.com/">广州市铂铱柯信息科技有限公司</a><br>2018年04月-至今       <a href="http://www.homonia.com/">北京和信融慧信息科技有限公司</a>  <h1 id="擅长领域"><a href="#擅长领域" class="headerlink" title="擅长领域"></a>擅长领域</h1>业务:</li><li>RPA系统的设计开发  </li><li><a href="https://dynamics.microsoft.com/zh-cn/dynamics-crm/">CRM</a>系统的设计开发  </li><li><a href="https://baike.baidu.com/item/供应商管理系统">ESCM</a>系统的设计开发  </li></ul><p>框架：    </p><ul><li>基于<a href="https://dynamics.microsoft.com/zh-cn/dynamics-crm/">CRM</a>框架的 Web 系统设计开发</li><li>对于前端框架 <a href="http://cn.inspinia.cn">Inspina</a>、BootStrap、Jquery、<a href="https://www.layui.com/">Layui</a>等有使用经验</li></ul><p>技术：</p><ul><li>webform项目重构及性能调优</li><li>winform项目重构及性能调优</li><li>webapi,webservice</li><li>.net core和gensql结合开发  </li><li>IDE ：VS code,Visual Studio 2017,SSMS</li></ul><p>其他：  </p><ul><li><strong>DB：</strong> 主要使用sqlserver为主,对mysql,PostgreSQL,redis等数据库有基本的了解  </li><li><strong>消息队列：</strong> RabbitMq,Redis  </li><li><strong>开发语言：</strong> 主要使用C#和sql为主,用java、vb、python等语言做过基本功能。  </li><li><strong>版本管理:</strong> 主要使用SVN、Git、VSS</li><li><strong>反编译工具:</strong> dnspy/ILSpy，JetBrains dotPeek，.Net Reflector，Telerik JustDecompile</li></ul><h1 id="开发经历"><a href="#开发经历" class="headerlink" title="开发经历"></a>开发经历</h1><h2 id="ISSUE管理系统"><a href="#ISSUE管理系统" class="headerlink" title="ISSUE管理系统"></a>ISSUE管理系统</h2><ul><li><strong>时间：</strong> 一周</li><li><strong>描述：</strong> 统计公司项目的问题，统计分析问题进展情况。</li><li><strong>职责：</strong> 全栈</li><li><strong>角色：</strong> 全栈</li><li><strong>状态：</strong> 成功上线</li><li><strong>团队规模：</strong> 1人</li><li><strong>总结</strong><br> 该系统基于webform开发。<br> 该系统实现了多人多项目的状态管理,实现了ISSUE单据的assign，日报，周报，发送邮件通知等功能，对公司的项目管理质量有明显的提升，是个轻巧灵活的ISSUE管理系统。<br> 通过该系统掌握了window定时任务，发送邮件等基本功能。<br> 随着工作经验的丰富，发现有tower,jira等工具可以使用,比自己写的ISSUE管理系统相对而言要健壮,美观一些。<br> 该系统算是敏捷开发的一次不错的尝试。</li></ul><h2 id="SqlSever迁移到Mysql项目"><a href="#SqlSever迁移到Mysql项目" class="headerlink" title="SqlSever迁移到Mysql项目"></a>SqlSever迁移到Mysql项目</h2><ul><li><strong>时间：</strong> 一个月</li><li><strong>描述：</strong> 重构项目,目标是实现SqlServer数据库到Mysql数据库的迁移。</li><li><strong>职责：</strong> 全栈</li><li><strong>角色：</strong> 研发人员</li><li><strong>团队规模：</strong> 3人</li><li><strong>状态：</strong> 成功上线</li><li><strong>总结</strong><br> 该系统基于winform开发。<br> 该项目的目标是底层数据库并行支持mysql或者sqlserver,项目目标是600多个sql server的sql语句需要支持mysql版本的实现。<br> 通过该项目对比总结了mysql和sqlserver的语法和字段类型的差异，并温习了策略模式。<br> 因项目时间有限等原因,故没有采取将原生sql重构成EF实现的这种方式,若采用EF实现,可以更加便捷地继续向PostgreSQL等数据库进行迁移。 </li></ul><h2 id="搭建个人博客系统"><a href="#搭建个人博客系统" class="headerlink" title="搭建个人博客系统"></a>搭建个人博客系统</h2><ul><li><strong>时间：</strong> 三个月的业余时间</li><li><strong>描述：</strong> 该项目的目标是基于.net core构建一个博客系统,该博客系统具备编辑，分类，标签，评论等功能。</li><li><strong>职责：</strong> 全栈</li><li><strong>角色：</strong> 全栈</li><li><strong>团队规模：</strong> 1人</li><li><strong>项目状态：</strong> <strong><font color="#FF0000">既有失败,又有成功</font></strong></li><li><strong>总结</strong><br> 该系统基于.netcore开发。<br> 该系统失败的定义是我没有实现基于.netcore搭建出来一套具备编辑，分类，标签，评论等功能的博客系统的这个目标。<br> 该系统成功的部分在于基于该目标,我接触了很多之前没有接触的知识点。比如markdown,.netcore+dbfirst,PostgreSQL开发等等。<br> 在摸索该目标的过程中发现了Hexo这一套可以自己选择主题定制化的博客系统，并基于此搭建了一个属于自己的博客站点——<a href="https://ddabb.github.io">他山之石</a>。<br> 该项目的经验是 <strong><font color="#FF0000">一定要记住项目立项的最重要的目标是什么。</font></strong>，该项目的主要目标是一个博客系统,而创建一个博客系统的目标是对个人知识进行一个归纳整理，现在已经可以通过Hexo框架对个人知识进行归纳整理，就无需要再制造新的车轮了。</li></ul><h1 id="自我评价"><a href="#自我评价" class="headerlink" title="自我评价"></a>自我评价</h1><ul><li>个人遵循<strong>“Do not repeat yourself”</strong>原则，想法设法将重复低效的事情交由系统执行。</li><li>认可开源分享理念,混迹于github,oschina等站点,并认为开源促进社会进步。乐于总结和分享个人经验。座右铭——<strong>不接触，不了解；不分享，不成长。</strong></li><li>对算法以及AI等方向比较感兴趣  </li><li>做事专一，热衷于在一个领域持续积累经验并有所作为。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;个人基本信息&quot;&gt;&lt;a href=&quot;#个人基本信息&quot; class=&quot;headerlink&quot; title=&quot;个人基本信息&quot;&gt;&lt;/a&gt;个人基本信息&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;姓名&lt;/strong&gt; 刘石丰&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性别&lt;/str
      
    
    </summary>
    
    
      <category term="简历" scheme="https://www.60points.com/tags/%E7%AE%80%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>如无必要,勿增实体</title>
    <link href="https://www.60points.com/%E5%A6%82%E6%97%A0%E5%BF%85%E8%A6%81%E5%8B%BF%E5%A2%9E%E5%AE%9E%E4%BD%93/"/>
    <id>https://www.60points.com/如无必要勿增实体/</id>
    <published>2018-11-08T13:04:50.000Z</published>
    <updated>2018-11-12T08:06:19.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>初次接触到 <strong><a href="https://baike.baidu.com/item/奥卡姆剃刀原理">如无必要,勿增实体</a></strong> 是在《西部世界》这部美剧中,今日早晨我在看<a href="https://baike.baidu.com/item/贝叶斯定理">贝叶斯定理</a>的相关文章的时候,恰巧又温习到这句话，想聊一下该语句是怎么影响我的生活的。</p><h1 id="以往"><a href="#以往" class="headerlink" title="以往"></a>以往</h1><p>参加新的工作以后,很多东西都发生了变化。比如以前是B/S项目，现在是C/S项目。因为B/S的逻辑代码都存在于服务器端,基本上不用考虑源码被不良居心的人使用。而C/S架构存在源码泄露的风险，故需要对产品的Dll做混淆处理。<br>如果要制作一个安装包,避免不了以下这些步骤：</p><ul><li>SVN签出最新代码</li><li>重新生成解决方案</li><li>Release目录内的dll拷贝到混淆工具指定路径</li><li>混淆结果拷贝到安装包制作路径</li><li>生成安装包发布到指定路径</li></ul><p>在window下的tortoisesvn 可视化操作下,选中指定目录签出文件,并不麻烦。<br>在visual studio 2017下,打开几十个项目重新编译通过就有点麻烦，毕竟项目越多,Visual Studio加载越慢。<br>在多个Release目录中,选中指定的待混淆文件拷贝对混淆工具的指定路径是重复低效事件。<br>再将混淆结果拷贝到安装包制作路径再制作安装包是重复低效事件。<br>再将安装包拷贝到阿里云的Ftp服务器是重复低效事件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">原目录和目标目录的不断切换,不同工具的开启和调用,整个过程操作下来，顺利则30分钟，不顺利则一个小时。</span><br></pre></td></tr></table></figure></p><p>如果一天做两个不同版本的安装包，一天就一个多小时重复在安装包的制作之上。这并不能体现出我的工作价值。<br>鲁迅先生说过:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无端地空耗别人的时间,其实无异于谋财害命。</span><br></pre></td></tr></table></figure></p><p>若不想被谋财害命,需要作出一些改变。</p><h1 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h1><p>若是一年做一次安装包，写一个安装包部署手册就好了。一年之后再制作安装包的时候，参考该部署手册就能很好的解决问题了。<br>但是一周2~3次的安装包制作（不做解释^_^）,一周就有三四个小时用于制作安装包了。<br>《西部世界》好歹是一个机器人的世界,我公司又是做的RPA的产品,怎么自己还在做这种重复低效无意义的事情？  </p><ul><li>SVN可以通过命令行做签入签出的动作。</li><li>Visual Studio 2017 也可以通过命令行执行重新生成解决方案的动作。</li><li>拷贝文件到指定目录的代码网上比比皆是。</li><li>ftp也可以通过命令行执行上传下载文件的动作。</li></ul><p>我能不能制作一个工具,一键就把以上所有实现都给完成了？</p><h1 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h1><p>参考了一些资料，花了几天终于折腾出来了一个发布工具(Ftp命令行这部分未实现)，虽说这个发布并比不上docker的一件部署。<br>但是于我个人而言，却是近期以来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如无必要，勿增实体</span><br></pre></td></tr></table></figure></p><p>的最佳实践，基于此工具,制作一个安装包的时间已经省到一半的时间了,这样也是<strong>惜时如金</strong>的一种表现吧。<br>这个基于Hexo主题的网站搭建也是一个<strong>Do not repeat yourself</strong>的实践,没有试图再去从零开始搭建一个网站框架，创作一个新型的电子垃圾也是迷途知返吧；<br>再引用一句鲁迅的名言<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">总之，我们要拿来。我们要或使用，或存放，或毁灭。  </span><br><span class="line">那么，主人是新主人，宅子也就会成为新宅子。  </span><br><span class="line">然而首先要这人沉着，勇猛，有辨别，不自私。  </span><br><span class="line">没有拿来的，人不能自成为新人，没有拿来的，文艺不能自成为新文艺。</span><br></pre></td></tr></table></figure></p><p><strong>没有拿来的,技术不能自成为新技术</strong>。不需要创造重复的轮子，但是手上也需要有适合自己的工具。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>奥卡姆剃刀原理也好,Dry原则也好,RPA也好,AI也好，甚至西部世界也好都说明了一个道理：<br><strong>人从事重复简单的工作,能带来的是熟练程度的提升，但是在更年轻力壮的人或者机器人面前,他并不具备足够的竞争力。</strong></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://blog.csdn.net/lixiangminghate/article/details/51350846">使用bat脚本编译VS工程</a></li><li><a href="http://www.cnblogs.com/136asdxxl/p/7410947.html">svn 命令行使用总结</a></li><li><a href="http://www.cnblogs.com/joean/p/4870486.html">C# 如何执行bat文件 传参数</a></li><li><a href="https://blog.csdn.net/qq_18808965/article/details/77882381">如何使用DOS命令通过FTP进行上传和下载</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h1&gt;&lt;p&gt;初次接触到 &lt;strong&gt;&lt;a href=&quot;https://baike.baidu.com/item/奥卡姆剃刀原理&quot;&gt;如无必要,勿增实体&lt;/a&gt;
      
    
    </summary>
    
      <category term="IT经验" scheme="https://www.60points.com/categories/IT%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="原创" scheme="https://www.60points.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="生活感悟" scheme="https://www.60points.com/tags/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
      <category term="命令行" scheme="https://www.60points.com/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
      <category term="制作安装包" scheme="https://www.60points.com/tags/%E5%88%B6%E4%BD%9C%E5%AE%89%E8%A3%85%E5%8C%85/"/>
    
      <category term="Svn签出" scheme="https://www.60points.com/tags/Svn%E7%AD%BE%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>人狼羊菜2018年对象版本</title>
    <link href="https://www.60points.com/%E4%BA%BA%E7%8B%BC%E7%BE%8A%E8%8F%9C2018%E5%B9%B4%E5%AF%B9%E8%B1%A1%E7%89%88%E6%9C%AC/"/>
    <id>https://www.60points.com/人狼羊菜2018年对象版本/</id>
    <published>2018-10-31T15:46:29.000Z</published>
    <updated>2018-11-12T08:32:43.232Z</updated>
    
    <content type="html"><![CDATA[<p>新建Transport类,因方法和属性都有对应的详细说明，故不再赘述。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 运输类</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public class Transport</span><br><span class="line">&#123;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 运输对象名称</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public string ObjectName &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 运输方向描述</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public string DirectionDescription &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 校验初始状态的函数</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    Func&lt;int, bool&gt; ValidInitStateFuc &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 校验结束状态的函数</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    Func&lt;int, bool&gt; ValidEndStateFuc &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 单次运输函数</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    Func&lt;int, int&gt; MoveFunc &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    public Transport(string objectName, Func&lt;int, bool&gt; validInitState, Func&lt;int, bool&gt; validEndState,</span><br><span class="line">        Func&lt;int, int&gt; moveFunc)</span><br><span class="line">    &#123;</span><br><span class="line">        this.ObjectName = objectName;</span><br><span class="line">        this.ValidInitStateFuc = validInitState;</span><br><span class="line">        this.ValidEndStateFuc = validEndState;</span><br><span class="line">        this.MoveFunc = moveFunc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 运输方法</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;state&quot;&gt;初始状态&lt;/param&gt;</span><br><span class="line">    /// &lt;returns&gt;运输之后的状态&lt;/returns&gt;</span><br><span class="line">    public int Transfer(int state)</span><br><span class="line">    &#123;</span><br><span class="line">        if (ValidInitStateFuc(state))</span><br><span class="line">        &#123;</span><br><span class="line">            int result = MoveFunc(state);</span><br><span class="line">            if (ValidEndStateFuc(result))</span><br><span class="line">            &#123;</span><br><span class="line">                DirectionDescription = result &gt; 8 ? &quot;从A岸到了B岸。&quot; : &quot;从B岸到了A岸。&quot;;</span><br><span class="line">                Console.WriteLine(ObjectName + DirectionDescription);</span><br><span class="line">                return result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调用方法如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(&quot;transports 开始&quot;);</span><br><span class="line"></span><br><span class="line">    //判断是否合法状态</span><br><span class="line">    bool ValidEndState(int state) =&gt; state != 3 &amp;&amp; !(state &gt;= 6 &amp;&amp; state &lt;= 9) &amp;&amp; state != 12;</span><br><span class="line"></span><br><span class="line">    //判断人是否和羊在一起</span><br><span class="line">    bool IsPeopleWithSheep(int state) =&gt; state / 2 % 2 == 0 &amp;&amp; state &lt; 8 || state / 2 % 2 == 1 &amp;&amp; state &gt;= 8;</span><br><span class="line"></span><br><span class="line">    //判断人是否和狼在一起</span><br><span class="line">    bool IsPeopleWithWolf(int state) =&gt; !(state &gt;= 4 &amp;&amp; state &lt;= 11);</span><br><span class="line"></span><br><span class="line">    //判断人是否和菜在一起</span><br><span class="line">    bool IsPeopleWithGreens(int state) =&gt; state % 2 == 0 &amp;&amp; state &lt; 8 || state % 2 == 1 &amp;&amp; state &gt;= 8;</span><br><span class="line"></span><br><span class="line">    //运输人和青菜</span><br><span class="line">    int TransferPeopleWithGreens(int i) =&gt; i ^ 9;</span><br><span class="line"></span><br><span class="line">    //运输人和羊</span><br><span class="line">    int TransferPeopleWithSheep(int i) =&gt; i ^ 10;</span><br><span class="line"></span><br><span class="line">    //运输人和狼</span><br><span class="line">    int TransPeopleWithWolf(int i) =&gt; i ^ 12;</span><br><span class="line"></span><br><span class="line">    //运输人和狼</span><br><span class="line">    int TransPeople(int i) =&gt; i ^ 8;</span><br><span class="line">    Transport transport1 = new Transport(&quot;人和菜&quot;, IsPeopleWithGreens, ValidEndState, TransferPeopleWithGreens);</span><br><span class="line">    Transport transport2 = new Transport(&quot;人和羊&quot;, IsPeopleWithSheep, ValidEndState, TransferPeopleWithSheep);</span><br><span class="line">    Transport transport3 = new Transport(&quot;人和狼&quot;, IsPeopleWithWolf, ValidEndState, TransPeopleWithWolf);</span><br><span class="line">    Transport transport4 = new Transport(&quot;人&quot;, state =&gt; true, ValidEndState, TransPeople);</span><br><span class="line">    List&lt;Transport&gt; transports = new List&lt;Transport&gt; &#123;transport1, transport2, transport3, transport4&#125;;</span><br><span class="line">    int tempState = 0;</span><br><span class="line">    int EndState = 15;</span><br><span class="line">    while (tempState != EndState)</span><br><span class="line">    &#123;</span><br><span class="line">        foreach (var actionItem in transports)</span><br><span class="line">        &#123;</span><br><span class="line">            tempState = actionItem.Transfer(tempState);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(&quot;transports 结束&quot;);</span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">transports 开始</span><br><span class="line">人和羊从A岸到了B岸。</span><br><span class="line">人从B岸到了A岸。</span><br><span class="line">人和菜从A岸到了B岸。</span><br><span class="line">人和羊从B岸到了A岸。</span><br><span class="line">人和狼从A岸到了B岸。</span><br><span class="line">人从B岸到了A岸。</span><br><span class="line">人和羊从A岸到了B岸。</span><br><span class="line">transports 结束</span><br></pre></td></tr></table></figure></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://ddabb.github.io/wiki/人狼羊菜2018年过程版本/">人狼羊菜2018年过程版本</a></li><li><a href="https://ddabb.github.io/wiki/人狼羊菜2012年版本/">人狼羊菜2012年版本</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;新建Transport类,因方法和属性都有对应的详细说明，故不再赘述。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;
      
    
    </summary>
    
      <category term="逻辑思维" scheme="https://www.60points.com/categories/%E9%80%BB%E8%BE%91%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="人狼羊菜" scheme="https://www.60points.com/tags/%E4%BA%BA%E7%8B%BC%E7%BE%8A%E8%8F%9C/"/>
    
  </entry>
  
  <entry>
    <title>人狼羊菜2018年过程版本</title>
    <link href="https://www.60points.com/%E4%BA%BA%E7%8B%BC%E7%BE%8A%E8%8F%9C2018%E5%B9%B4%E8%BF%87%E7%A8%8B%E7%89%88%E6%9C%AC/"/>
    <id>https://www.60points.com/人狼羊菜2018年过程版本/</id>
    <published>2018-10-30T15:48:38.000Z</published>
    <updated>2018-12-04T15:29:08.028Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>假设开始人狼羊菜都是在A岸，目的是将人狼羊菜运输到B岸。<br>人,狼,羊，菜在A岸的标识为0,在B岸的标识位为1。经过枚举可以得出16种状态中不符合的有6种。<br>如图所示</p><p><img src="/人狼羊菜2018年过程版本/人狼羊菜状态图.png" alt="人狼羊菜状态图"></p><p>根据以上描述的状态模式,可以将问题转化为  </p><ul><li>判断运输的终止状态是否合法</li><li>判断人和羊是否在一侧</li><li>判断人和菜是否在一侧</li><li>判断人和狼是否在一侧</li><li>执行人独自过河的动作</li><li>执行人和羊一起过河的动作</li><li>执行人和狼一起过河的动作</li><li>执行人和菜一起过河的动作</li></ul><p>新建MoveClass类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 人狼羊菜运输类</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public class MoveClass</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>依次对应的函数如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 状态合法</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;state&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public bool IsVaild(int state)</span><br><span class="line">&#123;</span><br><span class="line">    return state != 3 &amp;&amp; !(state &gt;= 6 &amp;&amp; state &lt;= 9) &amp;&amp; state != 12;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 人和羊在一起返回真</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;state&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public bool IsPeopleWithSheep(int state)</span><br><span class="line">&#123;</span><br><span class="line">    return ((state / 2) % 2 == 0 &amp;&amp; state &lt; 8) || ((state / 2) % 2 == 1 &amp;&amp; state &gt;= 8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 人和菜在一起返回真</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;state&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public bool IsPeopleWithGreens(int state)</span><br><span class="line">&#123;</span><br><span class="line">    return state % 2 == 0 &amp;&amp; state &lt; 8 || state % 2 == 1 &amp;&amp; state &gt;= 8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 人和狼在一起返回真</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;state&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public bool IsPeopleWithWolf(int state)</span><br><span class="line">&#123;</span><br><span class="line">    return !(state &gt;= 4 &amp;&amp; state &lt;= 11);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 只身一人过河</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;state&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public int MovePerson(int state)</span><br><span class="line">&#123;</span><br><span class="line">    return state ^ 8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 人带羊过河</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;state&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public int MovePersonWithSheep(int state)</span><br><span class="line">&#123;</span><br><span class="line">    return state ^ 10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 人带狼过河</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;state&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public int MovePersonWithWolf(int state)</span><br><span class="line">&#123;</span><br><span class="line">    return state ^ 12;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 人带菜过河</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;state&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public int MovePersonWithGreens(int state)</span><br><span class="line">&#123;</span><br><span class="line">    return state ^ 9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要的逻辑函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public void Move()</span><br><span class="line">&#123;</span><br><span class="line">int state = 0, tempState;</span><br><span class="line">int EndState = 15;</span><br><span class="line">while (state != EndState)</span><br><span class="line">&#123;</span><br><span class="line">    tempState = MovePerson(state);</span><br><span class="line">    if (IsVaild(tempState))</span><br><span class="line">    &#123;</span><br><span class="line">        state = tempState;</span><br><span class="line">        Console.WriteLine(state &gt; 8 ? &quot;人独自一人从A岸到达B岸&quot; : &quot;人独自一人从B岸到达A岸&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (IsPeopleWithSheep(state))</span><br><span class="line">    &#123;</span><br><span class="line">        tempState = MovePersonWithSheep(state);</span><br><span class="line">        if (IsVaild(tempState))</span><br><span class="line">        &#123;</span><br><span class="line">            state = tempState;</span><br><span class="line">            Console.WriteLine(state &gt; 8 ? &quot;人带羊从A岸到达B岸&quot; : &quot;人带羊从B岸到达A岸&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (IsPeopleWithWolf(state))</span><br><span class="line">    &#123;</span><br><span class="line">        tempState = MovePersonWithWolf(state);</span><br><span class="line">        if (IsVaild(tempState))</span><br><span class="line">        &#123;</span><br><span class="line">            state = tempState;</span><br><span class="line">            Console.WriteLine(state &gt; 8 ? &quot;人带狼从A岸到达B岸&quot; : &quot;人带狼从B岸到达A岸&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (IsPeopleWithGreens(state))</span><br><span class="line">    &#123;</span><br><span class="line">        tempState = MovePersonWithGreens(state);</span><br><span class="line">        if (IsVaild(tempState))</span><br><span class="line">        &#123;</span><br><span class="line">            state = tempState;</span><br><span class="line">            Console.WriteLine(state &gt; 8 ? &quot;人带菜从A岸到达B岸&quot; : &quot;人带菜从B岸到达A岸&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行以上逻辑函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(&quot;MoveClass 开始&quot;);</span><br><span class="line">new MoveClass().Move();</span><br><span class="line">Console.WriteLine(&quot;MoveClass 结束&quot;);</span><br><span class="line">Console.ReadKey();</span><br></pre></td></tr></table></figure></p><p>最终运行结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MoveClass 开始</span><br><span class="line">人带羊从A岸到达B岸</span><br><span class="line">人独自一人从B岸到达A岸</span><br><span class="line">人带狼从A岸到达B岸</span><br><span class="line">人带羊从B岸到达A岸</span><br><span class="line">人带菜从A岸到达B岸</span><br><span class="line">人独自一人从B岸到达A岸</span><br><span class="line">人带羊从A岸到达B岸</span><br><span class="line">MoveClass 结束</span><br></pre></td></tr></table></figure></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://ddabb.github.io/人狼羊菜2018年对象版本/">人狼羊菜2018年对象版本</a></li><li><a href="https://ddabb.github.io/人狼羊菜2012年版本/">人狼羊菜2012年版本</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;h2 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h2&gt;&lt;p&gt;假设开始人狼羊
      
    
    </summary>
    
      <category term="逻辑思维" scheme="https://www.60points.com/categories/%E9%80%BB%E8%BE%91%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="人狼羊菜" scheme="https://www.60points.com/tags/%E4%BA%BA%E7%8B%BC%E7%BE%8A%E8%8F%9C/"/>
    
  </entry>
  
  <entry>
    <title>浅谈倾听</title>
    <link href="https://www.60points.com/%E6%B5%85%E8%B0%88%E5%80%BE%E5%90%AC/"/>
    <id>https://www.60points.com/浅谈倾听/</id>
    <published>2018-10-27T14:00:53.000Z</published>
    <updated>2018-11-12T07:58:52.305Z</updated>
    
    <content type="html"><![CDATA[<p>这件事情发生于2014-4-21这一天。<br>我坐在小卖部休息，店家的2岁的小女孩看我手上拿着kindle，表示很好奇。</p><ul><li>叔叔，我要抱。  </li><li>好啊。  </li></ul><p>她坐到了我的腿上。  </p><ul><li>叔叔，这是什么啊？  </li></ul><p>小女孩指着我的kindle问道。  </p><ul><li>这是哥哥看书的，哥哥教你认字好不好啊？  </li><li>好啊！    </li><li>这个字读什么啊?    </li></ul><p>我指着屏幕上的“人”字问她</p><ul><li>人。  </li><li>那你是人不？  </li><li>是啊。  </li><li>那我是人不？  </li><li>是啊。  </li><li>那你爸爸妈妈是人不？  </li><li>是啊。  </li><li>那你哥哥呢？  </li><li>他不是，他是狗。  </li></ul><p>她为什么会觉得她哥哥是狗呢？我可以教教她人和狗的区别是什么。</p><ul><li>你有几只脚啊？  </li><li>两只脚。  </li><li>你哥哥呢？  </li><li>两只脚。  </li><li>那你哥哥是狗不？  </li><li>是啊！  </li></ul><p>我开始有点抓狂了，怎么小孩子这么犟呢？外面恰好走过一只小狗~</p><ul><li>那狗有几只脚呢？  </li><li>我不知道，我出去数数。      </li></ul><p>片刻，她开口了。</p><ul><li>三只。  </li><li>不对，你再数数。  </li><li>五只。  </li><li>不对，你再数数。  </li><li>七只。  </li></ul><p>我彻底的无语了，我无力吐槽了，这时候她还没有体育老师呢~    </p><ul><li>四只。  </li><li>是的，你哥哥几只脚？  </li><li>两只。  </li><li>狗有几只脚呢？  </li><li>四只。  </li></ul><p>我觉得我胜利在望了，我可以去华师大读书拿教师证了。最后一个问题就是我的杀手锏，让这个小女孩深刻地反省到自己的错误。  </p><ul><li>那你哥哥是狗不？  </li><li>是啊，我哥哥是属狗的！    </li></ul><p>剩下我在原地凌乱。</p><p>回想起来，这件事情于我依旧是一个很好的课程。沟通不是鱼死网破式地证明自己是对的，而是要真正地耐心地倾听对方的想法，这才是重要的。<br>最后编辑于 2018年10月25日22:07:38</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这件事情发生于2014-4-21这一天。&lt;br&gt;我坐在小卖部休息，店家的2岁的小女孩看我手上拿着kindle，表示很好奇。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;叔叔，我要抱。  &lt;/li&gt;
&lt;li&gt;好啊。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;她坐到了我的腿上。  &lt;/p&gt;
&lt;ul&gt;
&lt;l
      
    
    </summary>
    
      <category term="生活感悟" scheme="https://www.60points.com/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="原创" scheme="https://www.60points.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
</feed>
